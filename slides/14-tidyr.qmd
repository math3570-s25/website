---
title: "Tidying Data `r emo::ji('broom')`"
subtitle: "MATH/COSC 3570 Introduction to Data Science"
author: "Dr. Cheng-Han Yu <br> Department of Mathematical and Statistical Sciences <br> Marquette University"
# date: "`r format(Sys.time(), '%B %d %Y')`"
# macros: _macros.tex # import a list of TeX/LaTeX definitions
format: 
  revealjs:
    #     - "macros.tex"
    html-math-method:
      method: mathjax
      url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
    # include-in-header:
    highlight-style: arrow
    code-block-bg: true
    self-contained: false
    slide-number: c/t
    incremental: false
    width: 1800
    height: 1000
    margin: 0.05
    logo: "https://upload.wikimedia.org/wikipedia/commons/e/e8/Marquette_Golden_Eagles_logo.svg"
    footer: "[math3570-s24.github.io/website](https://math3570-s24.github.io/website/)"
    theme: ["simple", "slides.scss"]
    multiplex: true
    code-link: true
    fig-cap-location: bottom
    fig-align: center
    transition: none ## fade slide convex concave zoom
    title-slide-attributes:
      data-background-color: "#447099"
      # data-background-image: images/paper-texture.jpg
      # data-background-size: cover
      # data-background-color: "#698ED5"
editor: source
execute:
  freeze: true
  echo: true
---

#  {visibility="hidden"}

\def\bx{\mathbf{x}}
\def\bg{\mathbf{g}}
\def\bw{\mathbf{w}}
\def\bbeta{\boldsymbol \beta}
\def\bX{\mathbf{X}}
\def\by{\mathbf{y}}
\def\bH{\mathbf{H}}
\def\bI{\mathbf{I}}
\def\bS{\mathbf{S}}
\def\bW{\mathbf{W}}
\def\T{\text{T}}
\def\cov{\mathrm{Cov}}
\def\cor{\mathrm{Corr}}
\def\var{\mathrm{Var}}
\def\E{\mathrm{E}}
\def\bmu{\boldsymbol \mu}
\DeclareMathOperator*{\argmin}{arg\,min}
\def\Trace{\text{Trace}}



```{r}
#| label: setup
#| include: false
#| eval: true
library(countdown)
library(emo)
library(knitr)
library(gt)
library(gtExtras)
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(fontawesome)
library(rmarkdown)
library(reticulate)
library(lattice)
library(openintro)
library(plotly)
# library(ISLR2)
# library(genridge)
# library(glmnet)
# library(gam)
# library(splines)
# library(MASS)

# library(ElemStatLearn)
knitr::opts_chunk$set(
    fig.asp = 0.618,
    fig.align = "center",
    out.width = "100%",
    fig.retina = 10,
    fig.path = "images/14-tidyr/",
    message = FALSE,
    global.par = TRUE
)
options(
  htmltools.dir.version = FALSE,
  dplyr.print_min = 6, 
  dplyr.print_max = 9,
  tibble.width = 80,
  width = 80,
  digits = 3
  )
hook_output <- knitr::knit_hooks$get("output")
knitr::knit_hooks$set(output = function(x, options) {
  lines <- options$output.lines
  if (is.null(lines)) {
    return(hook_output(x, options))  # pass to default hook
  }
  x <- unlist(strsplit(x, "\n"))
  more <- "..."
  if (length(lines)==1) {        # first n lines
    if (length(x) > lines) {
      # truncate the output, but add ....
      x <- c(head(x, lines), more)
    }
  } else {
    x <- c(more, x[lines], more)
  }
  # paste these lines together
  x <- paste(c(x, ""), collapse = "\n")
  hook_output(x, options)
})
```


# {background-color="#A7D5E8" background-image="https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/tidyr.png" background-size="30%" background-position="90% 50%"}

::: {.left}
<h1> Grammar of Data Tidying </h1>
:::

::: notes
- OK. We are still in the stage of data wrangling. But here we are gonna tidy our data using another tidyverse package called tidyr.
:::


## Grammar of Data Tidying
- **Have** data organised in an **unideal** way for our analysis
- **Want** to *re*-organise the data to carry on with our analysis

:::: {.columns}

::: {.column width="50%"}
```{r dplyr-part-of-tidyverse, echo=FALSE, out.width="52%", caption = "tidyr is part of the tidyverse"}
#| purl=FALSE
include_graphics("images/14-tidyr/tidyr-part-of-tidyverse.png")
```
:::


::: {.column width="50%"}

<br>

The goal of [**tidyr**](https://tidyr.tidyverse.org/reference/index.html) is to help you tidy your data via

- **pivoting** for going between *wider* and *longer* data 
- **separating** and **uniting** character columns
- clarifying how `NA`s should be treated
- nesting and unnesting columns
:::
::::


::: notes
- Suppose we have a data set that is untidy, and organised in an *un*ideal way for our analysis. 
- What tidyr is doing is not like dplyr, just filter rows or select columns, because it is kinda meaningless, because the data after filtering or selecting from the untidy data are still untidy.
- So our goal is to re-organise the data so that it is clean enough for being filtered or selected and for later data analysis.
- tidyr helps you tidy your data via
    - **pivoting** for going between *wider* and *longer* data 
    - **separating** and **uniting** character columns
    - clarifying how `NA`s should be treated. for example, do we wanna keep them or drop them, or fill in with some values.
    - nesting and unnesting columns
- We will go through the first three. You can check the tidyr page to learn more about its functionality.
:::

## Pivoting

- To *tidy* your data,
  + first, figure out what the (column) variables and (row) observations are
  + second is to resolve one of two common problems:
      - One (column) variable might be *spread across multiple columns*.
      - One (row) observation might be *scattered across multiple rows*.
      

. . .

```{r}
#| purl=FALSE
customers <- read_csv("./data/sales/customers.csv")
```


:::: {.columns}

::: {.column width="50%"}

### [wider ($2 \times 4$)]{.green} 

**more columns**

```{r}
#| purl: false
customers
```
:::



::: {.column width="50%"}

### [longer ($6 \times 3$)]{.pink}

**more rows** by `pivot_longer()`

```{r}
#| purl: false
#| echo: false
customers |> 
  pivot_longer(cols = item_1:item_3, names_to = "item_no", values_to = "item")
```
:::
::::


::: notes
- If our data is untidy, to tidy our data, first, we get to figure out what the variables (column) and observations (row) are. Remember the definition of tidy data. each row is for one and only one observation, and each column is for one and only one variable.
- Once we know observations and variables, we need to resolve one of two common problems:
   - One variable might be *spread across multiple columns*.
   - One observation might be *scattered across multiple rows*.
- either problem is a reason why our data is not tidy.
:::


## `pivot_longer()` and `pivot_wider()`
- To fix these problems, we'll need `pivot_longer()` and `pivot_wider()`

- Starts with a data set,
  - `pivot_longer()` *add* more [rows]{.green} and *decreases* the number of [columns]{.green}.
  - `pivot_wider()` *add* more [columns]{.green} and *decreases* the number of [rows]{.green}.

::: notes
- To fix these problems, we'll need the functions `pivot_longer()` and `pivot_wider()`
- pivot_longer() starts with a data set and add more rows to it. Make the data set longer
- pivot_wider() starts with a data set and add more columns to it. Make the data set wider
:::


## `pivot_longer()` and `pivot_wider()`
:::: {.columns}

::: {.column width="50%"}
One variable *spreads across multiple columns*
```{r}
#| purl: false
#| echo: false
include_graphics("images/14-tidyr/wide_data.png")
```
:::



::: {.column width="50%"}
One subject is *scattered across multiple rows*
```{r}
#| purl: false
#| echo: false
include_graphics("images/14-tidyr/long_data.png")
```
:::
::::


::: notes
- To change the left data set to the right data set, we use pivot_longer(), because the transformed data set has more rows and will typically has less columns as well.
- To change the right data set to the left data set, we use pivot_wider(), because the transformed data set has more columns and will typically has less rows as well.
:::


## `pivot_longer()` and `pivot_wider()`

```{r}
#| purl: false
#| echo: false
#| out-width: "55%"
include_graphics("images/14-tidyr/tidyr-longer-wider.gif")
```


::: notes
- the gif here illustrate the idea of pivot_longer() and pivot_wider() function.
:::



## Data: sales/customers.csv
```{r}
#| label: customers-data
customers <- read_csv("data/sales/customers.csv")
```

:::: {.columns}

::: {.column width="50%"}

### [wider ($2 \times 4$)]{.green} 

**more columns**

```{r}
#| purl: false
customers
```
:::



::: {.column width="50%"}

### [longer ($6 \times 3$)]{.pink}

**more rows** by `pivot_longer()`

```{r}
#| purl: false
#| echo: false
customers |> 
  pivot_longer(cols = item_1:item_3, names_to = "item_no", values_to = "item")
```
:::
::::




::: notes
<!-- - Let's look at an example so you can see the idea of pivoting. -->
<!-- - the data set is from customers.csv. -->
- And the original customers data is in this wider format, where I have one row per customer. We have two customers and so two rows in the data frame.
- and then we have individual columns for the items they bought. The first customer bought 3 items, bread, milk, banana and the second customer bought two items, milk and toilet paper, so the the item_3 column value is NA.
- But this data format may not be what we want.
- In fact, what we want to do for this particular example is to have it in a format where one row per customer per item, so I can do further analysis.
- so we wanna go from wider to longer format, because the format we want has more rows and less columns.
:::




## `pivot_longer()`


:::: {.columns}

::: {.column width="50%"}

- `data`: data frame


:::


::: {.column width="50%"}
```{r}
#| purl: false
#| eval: false
#| code-line-numbers: "1-6|2"
pivot_longer(
    data,
    cols, 
    names_to = "name", 
    values_to = "value"
    )
```
:::
::::




::: notes
- So we are going to use a function pivot_longer().
- Like other functions in tidyverse, the first argument is again a data frame.
:::


## `pivot_longer()`

:::: {.columns}

::: {.column width="50%"}

- `data`: data frame

- `cols`: columns to pivot into longer format

:::


::: {.column width="50%"}
```{r}
#| purl: false
#| eval: false
#| code-line-numbers: "3"
pivot_longer(
    data,
    cols, 
    names_to = "name", 
    values_to = "value"
    )
```
:::
::::

::: notes
- then we give it the columns we want to pivot into the longer format
:::


## `pivot_longer()`

:::: {.columns}

::: {.column width="50%"}

- `data`: data frame

- `cols`: columns to pivot into longer format

- `names_to`: name of the column where **column names** of pivoted variables go (character string)

:::


::: {.column width="50%"}
```{r}
#| purl: false
#| eval: false
#| code-line-numbers: "4"
pivot_longer(
    data,
    cols, 
    names_to = "name", 
    values_to = "value"
    )
```
:::
::::


::: notes
- and then we give the argument [names_to] the name of the column (in the transformed longer data) where column names of pivoted variables (in the original wider data) go, which is a character string.
:::


## `pivot_longer()`

:::: {.columns}

::: {.column width="50%"}

- `data`: data frame

- `cols`: columns to pivot into longer format

- `names_to`: name of the column where **column names** of pivoted variables go (character string)

- `values_to`: name of the column where **data values** in pivoted variables go (character string)

:::


::: {.column width="50%"}
```{r}
#| purl: false
#| eval: false
#| code-line-numbers: "5|1-6"
pivot_longer(
    data,
    cols, 
    names_to = "name", 
    values_to = "value"
    )
```
:::
::::


::: notes
- and finally we give the argument [values_to] the name of the column (in the transformed longer data) where data values of pivoted variables (in the original wider data) go, which is also a character string.
- So basically we are constructing two new variables in the new longer data set, and we are going to give their name as a character string, so they can be placed in the headers for those columns.
:::


## customers $\rightarrow$ purchases

:::: {.columns}

::: {.column width="50%"}
```{r}
customers
```

```{r}
#| label: purchase-data
#| class-source: "my_class600"

purchases <- customers |> 
  pivot_longer(
    # variables item_1 to item_3 
    # to be pivoted into longer format 
    cols = item_1:item_3,
    
    # col name of the names 
    # item_1 item_2 and item_3 
    names_to = "item_no",
    
    # col name of the values in the cols
    # item_1 item_2 and item_3 
    values_to = "item"
    )
```
:::


::: {.column width="50%"}
```{r}
#| purl: false
purchases
```

In customers data, 

- **Names** *item_1, item_2, item_3* are values of variable `item_no` in `purchases`

- **Values** *bread, milk, etc* are values of variable `item` in `purchases`
:::
::::

::: notes
- Let's see how the function actually works in the customers example.
- Suppose we start with the customers data set which is in a wider format.
- And we wanna pivot it into a longer format.
- the columns I wanna pivot are the ones that have information about the items that customers bought, which are item1, item 2, and item3.
- So I write item1:item3 (we can also use any helper function to select columns)
- OK Now, the column names item_1 item_2, item_3 should be in a new column in the transformed longer data set whose column name is called item_no.
- ANd the values in those three columns (the cells in the original data) should go into another new column in the in the transformed longer data set whose column name is called item that basically shows what the customers had purchased.
- So again the column names of the original wider data go into a new column called item_no
- and the values of the column names of the original wider data go into a new column called item.
- And I end up with a longer data set called purchases with 6 rows and 3 columns
:::



## Why Pivot?

- The next step of your analysis needs it.
- The new `purchases` data set and the `prices` data can now be joined together with the common key variable `item`.
<!-- - With the joined data set, we can further calculate total revenue for example. -->


:::: {.columns}

::: {.column width="50%"}
```{r}
#| label: price-data
prices <- read_csv("./data/sales/prices.csv")
prices
```
:::


::: {.column width="50%"}
```{r}
purchases |> 
    left_join(prices) #<<
```
:::
::::

::: notes
- Why do we want to pivot our data?
- Most likely, because the next step of your analysis needs it.
- Suppose we have another data set called prices as shown on the left that contains price of grocery items
- After pivoting our data, the new purchases data set and the prices data can now be joined together with the common key variable item.
- With the joined data set, we can further calculate total revenue for example.
:::


## purchases $\rightarrow$ customers

:::: {.columns}

::: {.column width="50%"}
- `data`: data frame
- `names_from`: which column variable in the long format contains the what should be **column names** in the wide format
- `values_from`: which column variable in the long format contains the what should be **(cell) values** in the new columns in the wide format
:::

::: {.column width="50%"}
```{r}
#| label: pivot-wider
purchases
purchases |> 
    pivot_wider(              
        names_from = item_no, 
        values_from = item    
    ) 
```
:::
::::

::: notes
- All right. In fact we can also go back from a longer data to a wider data, which is the original data set we start with.
- `data`: data frame
- `names_from`: which column variable in the long format contains what should be **column names** in the wide format
- `values_from`: which column variable in the long format contains what should be **(cell) values** in the new columns in the wide format
- Notice that item_no and item are not quoted because they are variables that exist in our data frame purchases. 
- We don't construct new variables as we do when creating a data set in a longer format.
- OK. That's pivoting, changing data set from wider to longer, or longer to wider format.
:::


## `separate()`   {visibility="hidden"}
- `separate()` pulls apart *one column into multiple ones*, by splitting wherever a separator character appears.
- By default `separate()` splits values wherever it sees a **character that isn't a number or letter**.


:::: {.columns}

::: {.column width="50%"}
```{r}
#| label: table3
# number of TB cases documented by WHO
tidyr::table3
```
:::

::: {.column width="50%"}
```{r}
#| label: separate
table3 |> 
  separate(col = rate, 
           into = c("cases", "population"))
```
:::
::::

::: notes
- Now let's see how split or combine character columns
- `separate()` pulls apart one column into multiple columns, by splitting wherever a separator character appears.
- By default, `separate()` splits values wherever it sees a **character that isn't a number or letter**.
- Example is here. Here we have a data set called table3.
- Note that its column rate is of type character, having a form some number divided by some number.
- In fact, the rate is computed as the total number of cases divided by the population size, and the rate variable actually contains two types of information.
- So we can separate rate into two columns, one for cases, the other for population. 
- In the separate() function, we specify the column we want to split, which is rate, then in the into argument, we put the column names of the new splitted columns.
- And you see the separate() function automatically choose the slash "/" to be the separator that separate the two numbers.
- Use type_convert() to convert data type.
:::


## `separate()`  {visibility="hidden"}


:::: {.columns}

::: {.column width="50%"}
```{r}
#| label: separate-sep

## explicitly specify separator 
table3 |> 
  separate(
      rate, 
      into = c("cases", "population"), 
      sep = "/"
      )
```
:::

::: {.column width="50%"}
```{r}
#| label: separate-convert
## convert to better data types (chr to int)
table3 |>  
  separate(
      rate, 
      into = c("cases", "population"), 
      convert = TRUE
      )
```
:::
::::

::: notes
- And of course, you can explicitly specify your separator to split the column using the argument sep.
- And the separate() function is conservative, meaning that it leaves the type of the column as it is. So the new cases and population variables are both character types too.
- If we want them to be numeric type, we can add convert = TRUE. The function will try to find an appropriate data type for the variables. Here they are all integers.
:::


## `unite()`  {visibility="hidden"}

- `unite()` is the inverse of `separate()`: it combines multiple columns into a single column. 


:::: {.columns}

::: {.column width="50%"}
```{r}
#| label: table5
tidyr::table5
```
:::

::: {.column width="50%"}
```{r}
#| label: unite
## default separator is "_"
table5 |>  
  unite(col = "long_year",
        century, year)
```
:::
::::


::: notes
- `unite()` is the inverse of `separate()`: it combines multiple columns into a single column. 
- This table5 has two columns, century and year, which is kinda redundant.
- So we can combine the two columns into one single column.
- To combine them, we use the unite() function. We specify the new single column name in the col argument called "long_year", followed by the columns to unite, century and year.
- By default, the two columns will be combined with the separator "_".
:::


## `unite()`  {visibility="hidden"}

- `unite()` is the inverse of `separate()`: it combines multiple columns into a single column. 

:::: {.columns}

::: {.column width="50%"}
```{r}
#| label: unite-sep

# separator is "*"
table5 |>
  unite(col = "long_year",
        century, year,
        sep = "*")
```
:::

::: {.column width="50%"}
```{r}
#| label: unite-none
# separator is ""
table5 |> 
  unite(col = "long_year",
        century, year,
        sep = "")
```
:::
::::

::: notes
- As separate(), you can use other separators using the "sep" argument. 
- When unite(), always character
- Use type_convert() to convert data type.
:::



## Missing Values {visibility="hidden"}

- **Explicitly**: flagged with `NA` or other character/string representing a missing value.
- **Implicitly**: simply not present in the data.


```{r}
#| label: stock-data
(stocks <- tibble(yr  = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
                  qtr = c(   1,    2,    3,    4,    2,    3,    4),
                  ret = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)))
```

- *Row 4:* The stock return for the 4th quarter of 2015 is **explicitly** missing
- *Row 5:* The stock return for the 1st quarter of 2016 is **implicitly** missing


::: notes
- OK let's spend a little time talking about missing values.
- Missing values can be **Explicitly** missing, meaning that they are flagged with `NA` or other character/string representing a missing value.
- Or missing values can be **Implicitly** missing: meaning that they are simply not present in the data.
- Suppose we have a stocks data with variable, tear, qtr, and return.
- The return for the fourth quarter of 2015 is explicitly missing, because the cell where its value should be instead contains NA.
- The return for the first quarter of 2016 is implicitly missing, because it simply does not appear in the dataset. 
:::


## pivot_wider() Make Implicit Values Explicit {visibility="hidden"}

> An **explicit** missing value is the **presence of an absence**.

> An **implicit** missing value is the **absence of a presence**.

```{r}
#| label: stock-wider
stocks |> 
    pivot_wider(names_from = yr, values_from = ret)
```


::: notes
- So basically, An **explicit** missing value is the **presence of an absence**; an **implicit** missing value is the **absence of a presence**.
- One way to make implicit missing values explicit is to make the data set wider by putting years in the columns.
- Each year is supposed to have 4 quarters, 2016 has no first quarter and so has no return value, so we got an NA here.
:::


## `complete()`: Making Missing Values Explicit {visibility="hidden"}

:::: {.columns}

::: {.column width="50%"}
```{r}
#| purl: false
stocks
```
:::

::: {.column width="50%"}
```{r}
#| label: complete
stocks |>  
    complete(yr, qtr)
```
:::
::::


::: notes
- Another way to make implicit missing values explicit is to use the complete() function.
- complete() takes a set of columns, and finds all unique combinations. It then ensures the original data set contains all those values, filling in explicit NAs where necessary. 
- So here we find all unique combinations of year and quarter, and because there is no year 2016 and first quarter in the original data set, its return is NA.
:::

## `fill()`: Fill in Missing Values {visibility="hidden"}

:::: {.columns}

::: {.column width="50%"}
```{r}
#| label:  trt-data
#| echo: false
trt_data <- tribble(
    ~ person,           ~ treatment,    ~result,
    "Derrick Whitmore", 1,           7,
    NA,                 2,           10,
    NA,                 3,           9,
    "Katherine Burke",  1,           4
)
```
```{r}
#| purl=FALSE
trt_data
```
:::

::: {.column width="50%"}
```{r}
#| label: fill
trt_data |> 
    fill(person)
```
:::
::::


::: {.alert}
`fill()` will find the most recent or the last observation that is not a missing value.
:::

::: notes
- Sometimes when a data source has primarily been used for data entry, missing values indicate that the previous value should be carried forward:
- You can fill in missing values with fill(). It takes a set of columns where you want missing values to be replaced by the most recent non-missing value. (sometimes called last observation carried forward).
- Like this treatment data set, the fill() function will find the most recent or the last observation that is not a missing value, which is Derrick, and the two missing values are replaced with Derrick.
:::

##
:::{.lab}
```{r}
#| purl: false
#| echo: false
#| out-width: "73%"
#| fig-cap: "Source: [FiveThirtyEight](https://projects.fivethirtyeight.com/trump-approval-ratings/adults/)"
knitr::include_graphics("images/14-tidyr/trump-approval.png")
```
:::

##
:::::: {.lab}
<span style="color:blue"> **17-tidyr (Present your work!)** </span>

In **lab.qmd** `## Lab 17` section,

<!-- - Create a R script named **lab15-tidyr.R** -->
- Import `trump.csv`. Call it `trump_data` as below on the left.

- Use `pivot_longer()` to transform `trump_data` into the data set `trump_longer` on the right.

::::: {.midi}
:::: {.columns}

::: {.column width="50%"}
```{r include=FALSE}
#| purl=FALSE
trump_data <- read_csv("./data/trump.csv")
```
```{r}
#| purl=FALSE
trump_data
```
:::


::: {.column width="50%"}
```{r}
#| purl: false
#| eval: false
trump_longer <- ______________
    pivot_longer(
        cols = ____________,
        names_to = _______________,
        values_to = _______________
    ) 
```

```{r echo=3}
#| purl: false
trump_longer <- trump_data |> 
    pivot_longer(
      cols = c(approval, disapproval),
      names_to = "rating_type",
      values_to = "rating_value"
    ) 
trump_longer
```
:::
::::
:::::
::::::

##

:::{.lab}



**BONUS** `r emo::ji("money")`: Use `trump_longer` to generate a plot like the one below.

<!-- - *I give you a R hex sticker if you complete it!*  -->

<!-- Use `trump_longer` to generate the plot below. -->

```{r}
#| purl: false
#| eval: false
#| echo: false
trump_longer |> 
    ggplot(aes(x = ______, y = _______, color = ________)) +
    geom______() +
    facet_______(________)
```

```{r}
#| purl: false
#| echo: false
#| out-width: "80%"
trump_longer |> 
    ggplot(aes(x = date, y = rating_value, color = rating_type)) +
    geom_line() +
    facet_wrap(~ subgroup)
```
:::

# {background-color="#ffde57" background-image="https://upload.wikimedia.org/wikipedia/commons/e/ed/Pandas_logo.svg" background-size="40%" background-position="90% 50%"}


::: {.left}
<h1> Pivoting </h1>

<h2> pd.wide_to_long() </h2>

<h2> pd.pivot() </h2>


:::


## [pd.wide_to_long()](https://pandas.pydata.org/docs/reference/api/pandas.wide_to_long.html)

```{python}
import numpy as np
import pandas as pd
```

```{python}
customers = pd.read_csv('./data/sales/customers.csv')
purchases = pd.wide_to_long(df = customers,
                            stubnames = ['item'], 
                            i = 'customer_id', 
                            j = 'item_no', sep = '_')
purchases
```




## [pd.pivot()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.pivot.html?highlight=pivot#pandas.DataFrame.pivot)

```{python}
purchases = purchases.reset_index()
purchases
purchases.pivot(index = "customer_id", columns = "item_no", values = "item")
```