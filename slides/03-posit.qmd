---
title: "Posit Cloud `r emo::ji('cloud')`"
subtitle: "MATH/COSC 3570 Introduction to Data Science"
author: "Dr. Cheng-Han Yu <br> Department of Mathematical and Statistical Sciences <br> Marquette University"
# date: "`r format(Sys.time(), '%B %d %Y')`"
# macros: _macros.tex # import a list of TeX/LaTeX definitions
format: 
  revealjs:
    html-math-method:
      method: mathjax
      url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
    # include-in-header:
    #     - "macros.tex"
    highlight-style: github
    code-block-bg: true
    self-contained: false
    slide-number: c/t
    incremental: false
    width: 1800
    height: 1000
    margin: 0.05
    logo: "https://upload.wikimedia.org/wikipedia/commons/e/e8/Marquette_Golden_Eagles_logo.svg"
    footer: "[math3570-s24.github.io/website](https://math3570-s24.github.io/website/)"
    theme: ["simple", "slides.scss"]
    echo: false
    multiplex: true
    code-link: true
    fig-cap-location: bottom
    fig-align: center
    transition: none ## fade slide convex concave zoom
    title-slide-attributes:
      data-background-color: "#447099"
      # data-background-image: images/paper-texture.jpg
      # data-background-size: cover
      # data-background-color: "#698ED5"
editor: source
execute:
  freeze: true
---


# {visibility="hidden"}


\def\bx{\mathbf{x}}
\def\bg{\mathbf{g}}
\def\bw{\mathbf{w}}
\def\bbeta{\boldsymbol \beta}
\def\bX{\mathbf{X}}
\def\by{\mathbf{y}}
\def\bH{\mathbf{H}}
\def\bI{\mathbf{I}}
\def\bS{\mathbf{S}}
\def\bW{\mathbf{W}}
\def\T{\text{T}}
\def\cov{\mathrm{Cov}}
\def\cor{\mathrm{Corr}}
\def\var{\mathrm{Var}}
\def\E{\mathrm{E}}
\def\bmu{\boldsymbol \mu}
\DeclareMathOperator*{\argmin}{arg\,min}
\def\Trace{\text{Trace}}


```{r}
#| label: setup
#| include: false
#| eval: true
library(countdown)
library(emo)
library(knitr)
library(gt)
library(gtExtras)
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(fontawesome)
# library(ISLR2)
# library(genridge)
# library(glmnet)
# library(gam)
# library(splines)
# library(MASS)

# library(ElemStatLearn)
knitr::opts_chunk$set(
    fig.asp = 0.618,
    fig.align = "center",
    out.width = "100%",
    fig.retina = 10,
    fig.path = "images/03-posit/",
    message = FALSE,
    global.par = TRUE
)
options(
  htmltools.dir.version = FALSE,
  dplyr.print_min = 6, 
  dplyr.print_max = 6,
  tibble.width = 80,
  width = 80,
  digits = 3
  )
hook_output <- knitr::knit_hooks$get("output")
knitr::knit_hooks$set(output = function(x, options) {
  lines <- options$output.lines
  if (is.null(lines)) {
    return(hook_output(x, options))  # pass to default hook
  }
  x <- unlist(strsplit(x, "\n"))
  more <- "..."
  if (length(lines)==1) {        # first n lines
    if (length(x) > lines) {
      # truncate the output, but add ....
      x <- c(head(x, lines), more)
    }
  } else {
    x <- c(more, x[lines], more)
  }
  # paste these lines together
  x <- paste(c(x, ""), collapse = "\n")
  hook_output(x, options)
})
```


# **Let's get equipped with data science tools!**


## Integrated Development Environment

:::: {.columns}

::: {.column width="40%"}
```{r}
#| out-width: "60%"
#| fig-align: "center"
knitr::include_graphics("images/03-posit/posit.png")
```
:::

::: {.column width="30%"}

<br>

```{r}
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/03-posit/rstudio-logo.png")
```
:::

::: {.column width="30%"}
```{r}
#| out-width: "50%"
#| fig-align: "center"
knitr::include_graphics("https://upload.wikimedia.org/wikipedia/commons/3/38/Jupyter_logo.svg")
```
:::
::::

- R and Python are programming languages.

- [Posit Cloud](https://posit.cloud/) offers two integrated development environments (IDE): 
  + [RStudio](https://posit.co/products/open-source/rstudio/)
  + [JupyterLab/Jupyter Notebook](https://jupyter.org/)
 
 which are software for efficiently writing computer programs.

::: notes
- We'll use Posit Cloud to write R and Python code.
:::







## `r emo::ji('cloud')` Posit Cloud - Data Science w/o hardware hassles

- `r emo::ji('sunglasses')` Implement R/Python programs *without* needing to install R/Python and the IDE in your laptop! 

- `r emo::ji('sunglasses')` [**Posit Cloud**](https://rstudio.cloud/) lets you do, share and learn data science **online for free**! 


::::: {.columns}

:::: {.column width="50%"}
### `r emo::ji('disappointed')` Get everything ready locally: Lots of friction 

- Download and install R/Python
- Download and install IDE
- Install wanted R/Python packages:
  - tidymodels
  - tidyverse 
  - NumPy
  - ...
- Download and install tools like Git

::::


:::: {.column width="50%"}

::: {.fragment}

### `r emo::ji('nerd_face')` Posit Cloud: Much less friction 
```{r echo=FALSE, out.width="40%"}
knitr::include_graphics("images/03-posit/cloud.png")
```
- Go to [https://posit.cloud/](https://posit.cloud/)
- Log in

```{r}
#| echo: true
#| eval: false
#| label: hello

> hello world!
```
:::

::::
:::::



## Install Posit Cloud
::: {.lab}

- *Step 1*: In the Posit website [https://posit.co/](https://posit.co/), choose **Products > Posit Cloud** as shown below.
:::


```{r}
#| out-width: "50%"
#| fig-align: "center"
knitr::include_graphics("images/03-posit/posit-cloud.png")
```



## Install Posit Cloud

::: {.lab}

- *Step 2*: Click **GET STARTED**.

- *Step 3*: **Free or Student > Sign Up**. Please sign up with *GitHub* if you have one or use your *Marquette email address*.

:::


:::: {.columns}

::: {.column width="30%"}
```{r}
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/03-posit/landing-1-posit.png")
```
:::

::: {.column width="70%"}
```{r}
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/03-posit/posit-student-plan.png")
```
:::
::::



::: notes
file:///Users/chenghanyu/Dropbox/academia/books/r/teach-r-online-master/01-cloud/01-cloud.html#37
:::


## New Projects



:::: {.columns}

::: {.column width="85%"}
```{r}
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/03-posit/new-project-cloud-posit.png")
```
:::

::: {.column width="15%"}

```{r}
knitr::include_graphics("images/03-posit/new-project-option-24.png")
```
:::
::::

- We will talk about Git/GitHub shortly.



## Workspaces

- When you create an account on Posit Cloud you get a **workspace** of your own.
- You can add a new workspace (click **+ New Space** in sidebar) and control its permissions.

```{r}
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/03-posit/posit-cloud-hide-sidebar.png")
```

## Welcome to 3570 Data Science!

::: {.lab}
- I'm sending you a link via email for joining the course workspace **2024-spring-math-3570**. Please join.

```{r}
#| out-width: "70%"
#| fig-align: "center"
knitr::include_graphics("images/03-posit/join-space.png")
```

:::


::: notes
Go to D2l to send Posit Cloud invitation

Subject
Posit Cloud Invitation
Message
https://posit.cloud/spaces/459948/join?access_code=JY6N0CSQWE5qa7QFYxYKqWT9awi6wP2JqV3UNfj6

Best,
Dr. Yu
:::



##
::: {.lab}
<br>

- In the bar, click workspace **2024-spring-math-3570**.

- Click **New Project > New RStudio Project** to get into the IDE.

- In _Untitled Project_, name your project as **3570-project**.

- In the Console pane, write R code: a string **`"Hello WoRld!"`** or math **`2 + 4`**.

- **Tools > Global Options > Appearance** to select your favorite editor theme.

:::



##
```{r}
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/03-posit/rcloud_project.png")
```


## More Tips

- Read the [Posit Cloud guide](https://posit.cloud/learn/guide)

```{r echo=FALSE, out.width="80%", fig.align="center"}
#| out-width: "70%"
#| fig-align: "center"
knitr::include_graphics("images/03-posit/posit-cloud-guide.png")
```



<!-- https://posit.co/blog/three-ways-to-program-in-python-with-rstudio/ -->

# Working in Posit Cloud {background-color="#447099"}



## Panes

```{r}
#| out-width: "85%"
#| fig-align: "center"
#| label: "rstudio-panes"
knitr::include_graphics("images/03-posit/rstudio_panes.png")
```


## R Script
- A R script is a **.R** file that contains R code.

- To create a R script, go to **File > New > R Script**, or click the green-plus icon on the topleft corner, and select R Script.

```{r}
#| out-width: "85%"
#| fig-align: "center"
#| label: "script-r"
knitr::include_graphics("images/03-posit/script.png")
```


## Python Script
- A Python script is a **.py** file that contains Python code.

- To create a Python script, go to **File > New > Python Script**, or click the green-plus icon on the topleft corner, and select Python Script.

```{r}
#| out-width: "85%"
#| fig-align: "center"
#| label: "script-py"
knitr::include_graphics("images/03-posit/script-py.png")
```


## Run Code
- <span style="color:blue"> **Run** </span>: run the **current line** or **selection of code**. 
  + `ctrl + enter` (Win) or `cmd + enter` (Mac)
- <span style="color:blue"> **Icon right to the Run** </span>: re-run the **previous** code. 
  + `alt + ctrl + p` (Win) or `option + cmd + p` (Mac)
- <span style="color:blue"> **Source** </span>: run **all** the code in the R script.
  + `shift + ctrl + s` (Win) or `shift + cmd + s` (Mac)
- <span style="color:blue"> **Source with Echo** </span>: run **all** the code in the R script *with the code printed in the console*.
  + `shift + ctrl + enter` (Win) or `shift + cmd + enter` (Mac)



```{r}
#| label: "run-r"
#| out-width: "100%"
#| fig-align: "center"
knitr::include_graphics("images/03-posit/script.png")
```


## Run Python Code

- Running Python code may need to update some packages. Please say *YES!*

- When you run the Python code in the R console, the console will switch from R to Python.

- Type `quit` in the Python console to switch back to the R console.


```{r}
#| label: "run-py"
#| out-width: "40%"
#| fig-align: "center"
knitr::include_graphics("images/03-posit/run-py-pkg.png")
```

::: notes
REPL = Read, Evaluate, Print, and Loop

or type `reticulate::repl_python()`
:::


## Environment Tab

- The (global) environment is where we are currently working.
- Anything created or imported into the current R/Python session is stored in the environment and shown in the **Environment** tab.

- After we run the R script, objects stored in the environment are
  + Data set `mtcars`
  + Object `x` storing integer values 1 to 10.
  + Object `y` storing three numeric values 3, 5, 9.

```{r}
#| label: "env"
#| out-width: "70%"
#| fig-align: "center"
knitr::include_graphics("images/03-posit/environment.png")
```

## Environment Tab

- After we run the Python script, the object stored in the environment is
  + Object `b` storing a string `Hello World!`

```{r}
#| label: "env-py"
#| out-width: "80%"
#| fig-align: "center"
knitr::include_graphics("images/03-posit/environment-py.png")
```

## History Tab
- The **History** tab keeps a record of all previous commands.
  + <span style="color:blue">**save icon**</span>: save all history to a file
  + <span style="color:blue">**To Console**</span>: send the selected commands to the console.
  + <span style="color:blue">**To Source** </span>: inserted the selected commands into the current script.

```{r history, echo=FALSE, out.width="50%",fig.align='center'}
#| label: "history"
#| out-width: "40%"
#| fig-align: "center"
knitr::include_graphics("images/03-posit/history.png")
```

## History Tab
- The **History** tab keeps a record of all previous commands.
  + <span style="color:blue">**save icon**</span>: save all history to a file
  + <span style="color:blue">**To Console**</span>: send the selected commands to the console.
  + <span style="color:blue">**To Source** </span>: inserted the selected commands into the current script.

:::{.tip}
In the console pane, use `r emo::ji('arrow_up')`  to show the previous commands.
:::

## R Packages `r emo::ji('package')`
- When we start a R session, only built-in packages like **base**, **stats**, **graphics**, etc are available.
- Installing packages is an easy way to get access to others data and functions.

. . .


![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/readr.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/readxl.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/haven.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/PNG/tidyverse.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/tidyr.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/dplyr.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/sparklyr.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/ggplot2.png){width="150"}![](https://raw.githubusercontent.com/slowkow/ggrepel/master/man/figures/logo.svg){width="150"}![](https://raw.githubusercontent.com/thomasp85/gganimate/master/man/figures/logo.png){width="150"}![](https://raw.githubusercontent.com/sjmgarnier/viridis/master/hex_logo/viridis.svg){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/tibble.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/PNG/gt.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/purrr.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/lubridate.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/stringr.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/rvest.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/rmarkdown.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/knitr.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/PNG/quarto.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/shiny.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/PNG/devtools.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/main/PNG/flexdashboard.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/reticulate.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/broom.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/tidymodels.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/tidyposterior.png){width="150"}![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/thumbs/tidypredict.png){width="150"} and [more](https://github.com/rstudio/hex-stickers)!


# {background-color="#447099" background-image="images/03-posit/hex_laptop.jpeg" background-size="cover"}


<!-- ::: {style="vertical-align: text-bottom;"} -->
<!-- **ohi-science.org/news/takeaways-from-rstudioconf** -->
<!-- ::: -->

<!-- ::: {.bottom} -->
<!-- **ohi-science.org/news/takeaways-from-rstudioconf** -->
<!-- ::: -->

## Installing R Packages `r emo::ji('package')`
:::: {.columns}

::: {.column width="50%"}
- To install a package, for example, the [**ggplot2**](https://ggplot2.tidyverse.org/) package, we use the command
```{r package, echo=5, eval=FALSE}
# install.packages("car", repos = "http://cran.us.r-project.org")
r = getOption("repos")
r["CRAN"] = "http://cran.us.r-project.org"
options(repos = r)
install.packages("ggplot2")
# install.packages("car")
```
- In the right-bottom pane, **Packages > Install**
```{r, echo=FALSE, out.width="100%"}
knitr::include_graphics("./images/03-posit/pkg_install.png")
```
:::


::: {.column width="50%"}
<p align="center">
  <img src="https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/ggplot2.png" style="width:660px;" />
</p>
:::
::::


## Loading R Packages `r emo::ji('package')`
::::: {.columns}

:::: {.column width="50%"}

:::{.question}
What happened when you run
```{r}
#| echo: true
#| eval: false
ggplot(mpg, aes(x = displ, 
                y = hwy, 
                colour = class)) + 
    geom_point()
```
:::

::: {.fragment}

- To use any function or data in **ggplot2**, we write `ggplot2::` followed by the name of the function or data.

```{r}
#| echo: true
#| eval: false
ggplot2::ggplot(ggplot2::mpg, 
                ggplot2::aes(
                    x = displ, 
                    y = hwy, 
                    colour = class)
                ) + 
    ggplot2::geom_point()
```
:::


::::


:::: {.column width="50%"}

::: {.fragment}
- We can load the package into our R session using `library()`. 
- **With library(ggplot2)**, R knows the function and data are from the **ggplot2** package.
```{r}
#| echo: true
#| eval: false
library(ggplot2)
ggplot(mpg, aes(x = displ, 
                y = hwy, 
                colour = class)) + 
    geom_point()
```
:::

::::


:::::




## Help
- Don't know how a function works or what a data set is about `r emo::ji('question')` 
- `r emo::ji('point_right')` Simply type `?` followed by the data name or function name like
```{r}
#| echo: true
#| label: help
?mean
?mpg
```

. . .

::: {.question}
What does the function `mean()` do? What is the size of `mpg`?
:::


. . .

```{r}
#| out-width: "50%"
knitr::include_graphics("images/03-posit/mpg_help.png")
```


::: notes
A document will show up in the Help tab, teaching you how to use the function or explaining the data set.
:::


##

:::{.lab}
<span style="color:blue"> **01-Running R Script** </span>


- Load R package **ggplot2** into your Posit Cloud.

```{r}
#| echo: true
#| eval: false
## install the package if you haven't!
________(ggplot2)
```

- Create a R script named **lab01-run-script.R** in your **3570-project**.

- Copy and paste the code below into the script, and save it.

```{r, echo=-1}
#| eval: false
x <- 4; y <- 3
bar <- ggplot(data = diamonds) + 
    geom_bar(mapping = aes(x = cut, fill = cut), 
             show.legend = FALSE, width = 1) + 
    theme(aspect.ratio = 1) +
    labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
```
- Source the script. A pretty plot showing up?!
<!-- - Change `4` to `12` and `3` to `20`. Hit Run line by line. What happened? -->
<!-- - Use `?mpg` to see what `displ` and `hwy` mean, and use `?ggplot` and `?geom_point` to see more on creating a ggplot. -->
:::