---
title: "Homework 2: Data Visualization and Data Wrangling"
subtitle: "Spring 2025 MATH/COSC 3570 Introduction to Data Science by Dr. Cheng-Han Yu"
format: 
  html:
    toc: true
    code-fold: false
    code-tools: true
date: today
author: "**Insert Your Name!!**"
number-sections: true
from: markdown+emoji
editor: 
  source
---

```{r}
#| label: setup
#| include: false

####################################################
## !!!DO NOT MAKE ANY CHANGE OF THIS CODE CHUNK!!!##
####################################################

# Package names
packages <- c("knitr", "ggplot2", "ggrepel", "Lahman",
              "tidyverse", "formatR", "ggthemes")

# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
    install.packages(packages[!installed_packages])
}

# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
```

# Data Wrangling and Tidying

You use R and Python to do the following problems. You write R (Python) code for the problems starting with **[R]** (**[Python]**).


## Murders {#sec-murders}

Import the data set `murders`.

(@) **[R]** Use the pipe operator `|>` and the **dplyr** functions `mutate()`, `filter()`, `select()`, and `arrange()` to get the following data output. Call the data set `df`.

    The filtering conditions are 

    + `region` in "Northeast" or "West"
    + `rate = total / population * 100000` is less than 1. 
  
    The new variable `rank` is based on `rate`. The highest rate is ranked 1st. **[Hint:]** Use the function `rank()`.

```{r}

## code

# # A tibble: 8 Ã— 4
#    rate  rank state         total
#   <dbl> <dbl> <chr>         <dbl>
# 1 0.320    51 Vermont           2
# 2 0.380    50 New Hampshire     5
# 3 0.887    43 Wyoming           5
# 4 0.515    49 Hawaii            7
# 5 0.828    44 Maine            11
# 6 0.766    46 Idaho            12
# 7 0.796    45 Utah             22
# 8 0.940    42 Oregon           36
```


(@) **[Python]** Use Python methods `query()`, `filter()`, and `sort_values()` to do Problem 1. 

```{python}
import numpy as np
import pandas as pd
```

    
```{python}

## code

```


(@) **[R]** With `df`, use `contains()` to select column variables whose name contains the string *"at"*. Then order the data by `rate` decreasingly.

```{r}

## code

```

(@) **[Python]** With `df`, use argument `like=` in `filter()` to pick column variables whose name contains the string *"at"*. Then order the data by `rate` decreasingly.

```{python}

## code

```



(@) **[R]** Back to `murders`. Group the data by `region`, then use `summarize()` to compute the average, median, and standard deviation of `population`. Call the column names `avg`, `med`, and `stdev`.

```{r}

## code

```

(@) **[Python]** Back to `murders`. Group the data by `region`, then use [`agg()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.agg.html) to compute the average, median, and standard deviation of `population`. Call the column names `avg`, `med`, and `stdev`.

```{python}

## code

```



## Baseball {#sec-baseball}

The following baseball data are from the [**Lahman**](https://github.com/cdalzell/Lahman) package.

The `Batting` data frame contains the offensive statistics for all players for many years:

```{r}
#| echo: false
library(Lahman)
Batting |> as_tibble() |> glimpse()
```

(@) **[R]** Use `Batting` data to obtain the top 10 player observations that hit the most home runs (in descending order) in 2023. Call the data set `top10`, make it as a tibble and print it out.

```{r}

## code

```


(@) **[Python]**  Import the data `Batting.csv`. Use `Batting` data to obtain the top 10 player observations that hit the most home runs (in descending order) in 2023. Call the data set `top10` and print it out.


```{python}

## code

```



But who are these players? In the `top10` data, we see IDs, but names. The player names are in the `People` data set:

```{r}
#| echo: false
People |> as_tibble() |> glimpse()
```

We can see column names `nameFirst` and `nameLast`. 



(@) **[R]** Use `left_join()` to create a table of the top home run hitters. The data table should have variables *playerID*, *nameFirst*, *nameLast*, and *HR*. Overwrite the object `top10` with this new table, and print it out.

```{r}

## code

```


(@) **[Python]** Import the data `People.csv`. Use `merge()` to create a table of the top home run hitters. The data table should have variables *playerID*, *nameFirst*, *nameLast*, and *HR*. Overwrite the object `top10` with this new table, and print it out.

```{python}

## code

```



(@) **[R]** Use the `Fielding` data frame to add each player's position to the data `top10`. You filter `Fielding` for the year 2023 first, then use `right_join()`. This time show *nameFirst*, *nameLast*, *teamID*, *HR*, and *POS*. Make sure the data are ordered by `HR` decreasingly.

```{r}

## code

```


(@) **[Python]** Import the data `Fielding.csv`. Use it to add each player's position to the data `top10`. You query `Fielding` for the year 2023 first, then use `merge()`. This time show *nameFirst*, *nameLast*, *teamID*, *HR*, and *POS*. Make sure the data are ordered by `HR` decreasingly.

```{python}

## code

```


## Pivoting

```{r}
co2_wide <- data.frame(matrix(co2, ncol = 12, byrow = TRUE)) |> 
    setNames(1:12) |> 
    mutate(year = as.character(1959:1997))
```

(@) **[R]** Use the `pivot_longer()` function to make `co2_wide` tidy. The pivoted columns are `1` to `12`. Call the column with the CO2 measurements `co2` and call the month column `month`. Call the resulting object `co2_tidy`. Print it out.

```{r}

## code

```



(@) **[Python]** Import `co2_wide.csv`. Generate the data as `co2_tidy`.

```{python}

## code

```



# Data Visualization

In this section all the plots should be generated using **ggplot2** with R.



## murders

Use `murders` to make plots.


(@) Create a scatter plot of total murders (x-axis) versus population sizes (y-axis) using the pipe operator `|>` that the murders data set is on the left to `|>`.


```{r}

## code

```


(@) Generate the plot below using `label` and `color` aesthetics in `aes()` and a geometry layer `geom_label()`. Save the ggplot object as `p`. Here, we add abbreviation as the label, and make the labels' color be determined by the state's region.

```{r}

## code

```

```{r}
#| echo: false
knitr::include_graphics("./img/murder_label.png")
```



(@) Use the object `p` and 

  + Change both axes to be in the $\log_{10}$ scale using [`scale_x_log10()`](https://ggplot2.tidyverse.org/reference/scale_continuous.html) and `scale_y_log10()`
  + Add a title "Gun murder data"
  + Use the wall street journal theme in [**ggthemes**](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/).

```{r}

## code

```




## mpg

Use `mpg` to make plots.

(@) What's gone wrong with this code? Why are the points not blue? Change it so that the points are colored in blue.

```{r}
mpg |> ggplot(mapping = aes(x = displ, y = hwy, colour = "blue")) +
    geom_point()
```


(@) Generate the bar chart below.

```{r}

## code

```

```{r}
#| echo: false
knitr::include_graphics("./img/mpg_bar.png")
```



(@) Complete the code to generate the boxplot below. Note that `x = class` and `y = hwy`, so the coordinates need to be flipped.

```{r}

## code

```


```{r}
#| echo: false
knitr::include_graphics("./img/mpg_boxplot.png")
```


(@) Generate the histogram below with *density* scale. Map `y` to the internal variable `..density..` (`after_stat(density)`) to show density values. Put the legend inside the plot at `c(0.9, 0.15)`. (check ?theme help page)

```{r}

## code

```

```{r}
#| echo: false
knitr::include_graphics("./img/mpg_hist.png")
```



(@) Generate the scatter plot below. 

```{r}

## code

```

```{r}
#| echo: false
knitr::include_graphics("./img/mpg_text.png")
```
