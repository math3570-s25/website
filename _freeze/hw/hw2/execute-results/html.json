{
  "hash": "8319b746ad00ca5ab3b1cc6cb51f82f2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Homework 2: Data Visualization and Data Wrangling\"\nsubtitle: \"Spring 2025 MATH/COSC 3570 Introduction to Data Science by Dr. Cheng-Han Yu\"\nformat: \n  html:\n    toc: true\n    code-fold: false\n    code-tools: true\ndate: today\nauthor: \"**Insert Your Name!!**\"\nnumber-sections: true\nfrom: markdown+emoji\neditor: \n  source\n---\n\n\n\n# Data Wrangling and Tidying\n\nYou use R and Python to do the following problems. You write R (Python) code for the problems starting with **[R]** (**[Python]**).\n\n\n## Murders {#sec-murders}\n\nImport the data set `murders`.\n\n(@) **[R]** Use the pipe operator `|>` and the **dplyr** functions `mutate()`, `filter()`, `select()`, and `arrange()` to get the following data output. Call the data set `df`.\n\n    The filtering conditions are \n\n    + `region` in \"Northeast\" or \"West\"\n    + `rate = total / population * 100000` is less than 1. \n  \n    The new variable `rank` is based on `rate`. The highest rate is ranked 1st. **[Hint:]** Use the function `rank()`.\n\n::: {.cell}\n\n```{.r .cell-code}\n## code\n\n# # A tibble: 8 × 4\n#    rate  rank state         total\n#   <dbl> <dbl> <chr>         <dbl>\n# 1 0.320    51 Vermont           2\n# 2 0.380    50 New Hampshire     5\n# 3 0.887    43 Wyoming           5\n# 4 0.515    49 Hawaii            7\n# 5 0.828    44 Maine            11\n# 6 0.766    46 Idaho            12\n# 7 0.796    45 Utah             22\n# 8 0.940    42 Oregon           36\n```\n:::\n\n\n(@) **[Python]** Use Python methods `query()`, `filter()`, and `sort_values()` to do Problem 1. \n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\nimport pandas as pd\n```\n:::\n\n    \n::: {.cell}\n\n```{.python .cell-code}\n\n## code\n```\n:::\n\n\n(@) **[R]** With `df`, use `contains()` to select column variables whose name contains the string *\"at\"*. Then order the data by `rate` decreasingly.\n\n::: {.cell}\n\n```{.r .cell-code}\n## code\n```\n:::\n\n(@) **[Python]** With `df`, use argument `like=` in `filter()` to pick column variables whose name contains the string *\"at\"*. Then order the data by `rate` decreasingly.\n\n::: {.cell}\n\n```{.python .cell-code}\n\n## code\n```\n:::\n\n\n\n(@) **[R]** Back to `murders`. Group the data by `region`, then use `summarize()` to compute the average, median, and standard deviation of `population`. Call the column names `avg`, `med`, and `stdev`.\n\n::: {.cell}\n\n```{.r .cell-code}\n## code\n```\n:::\n\n(@) **[Python]** Back to `murders`. Group the data by `region`, then use [`agg()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.agg.html) to compute the average, median, and standard deviation of `population`. Call the column names `avg`, `med`, and `stdev`.\n\n::: {.cell}\n\n```{.python .cell-code}\n\n## code\n```\n:::\n\n\n\n## Baseball {#sec-baseball}\n\nThe following baseball data are from the [**Lahman**](https://github.com/cdalzell/Lahman) package.\n\nThe `Batting` data frame contains the offensive statistics for all players for many years:\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 113,799\nColumns: 22\n$ playerID <chr> \"aardsda01\", \"aardsda01\", \"aardsda01\", \"aardsda01\", \"aardsda0…\n$ yearID   <int> 2004, 2006, 2007, 2008, 2009, 2010, 2012, 2013, 2015, 1954, 1…\n$ stint    <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ teamID   <fct> SFN, CHN, CHA, BOS, SEA, SEA, NYA, NYN, ATL, ML1, ML1, ML1, M…\n$ lgID     <fct> NL, NL, AL, AL, AL, AL, AL, NL, NL, NL, NL, NL, NL, NL, NL, N…\n$ G        <int> 11, 45, 25, 47, 73, 53, 1, 43, 33, 122, 153, 153, 151, 153, 1…\n$ AB       <int> 0, 2, 0, 1, 0, 0, 0, 0, 1, 468, 602, 609, 615, 601, 629, 590,…\n$ R        <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 105, 106, 118, 109, 116, 102, …\n$ H        <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 189, 200, 198, 196, 223, 172,…\n$ X2B      <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 37, 34, 27, 34, 46, 20, 39, 28…\n$ X3B      <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 9, 14, 6, 4, 7, 11, 10, 6, 4, 2…\n$ HR       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 27, 26, 44, 30, 39, 40, 34, 45…\n$ RBI      <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 106, 92, 132, 95, 123, 126, 12…\n$ SB       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 2, 1, 4, 8, 16, 21, 15, 31, …\n$ CS       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 4, 1, 1, 0, 7, 9, 7, 5, 4, 4…\n$ BB       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 49, 37, 57, 59, 51, 60, 56, 66…\n$ SO       <int> 0, 0, 0, 1, 0, 0, 0, 0, 1, 39, 61, 54, 58, 49, 54, 63, 64, 73…\n$ IBB      <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 5, 6, 15, 16, 17, 13, 20, 14, …\n$ HBP      <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 0, 1, 4, 2, 2, 3, 0, 0, 1…\n$ SH       <int> 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 7, 5, 0, 0, 0, 0, 1, 0, 0, 0, 0…\n$ SF       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 7, 3, 3, 9, 12, 9, 6, 5, 2, …\n$ GIDP     <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 20, 21, 13, 21, 19, 8, 16, 14,…\n```\n\n\n:::\n:::\n\n(@) **[R]** Use `Batting` data to obtain the top 10 player observations that hit the most home runs (in descending order) in 2023. Call the data set `top10`, make it as a tibble and print it out.\n\n::: {.cell}\n\n```{.r .cell-code}\n## code\n```\n:::\n\n\n(@) **[Python]**  Import the data `Batting.csv`. Use `Batting` data to obtain the top 10 player observations that hit the most home runs (in descending order) in 2023. Call the data set `top10` and print it out.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\n## code\n```\n:::\n\n\n\nBut who are these players? In the `top10` data, we see IDs, but names. The player names are in the `People` data set:\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 21,010\nColumns: 26\n$ playerID     <chr> \"aardsda01\", \"aaronha01\", \"aaronto01\", \"aasedo01\", \"abada…\n$ birthYear    <int> 1981, 1934, 1939, 1954, 1972, 1985, 1850, 1877, 1869, 186…\n$ birthMonth   <int> 12, 2, 8, 9, 8, 12, 11, 4, 11, 10, 9, 3, 10, 2, 8, 9, 6, …\n$ birthDay     <int> 27, 5, 5, 8, 25, 17, 4, 15, 11, 14, 20, 16, 22, 16, 17, 1…\n$ birthCity    <chr> \"Denver\", \"Mobile\", \"Mobile\", \"Orange\", \"Palm Beach\", \"La…\n$ birthCountry <chr> \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"D.R.\", \"USA\", \"USA\", …\n$ birthState   <chr> \"CO\", \"AL\", \"AL\", \"CA\", \"FL\", \"La Romana\", \"PA\", \"PA\", \"V…\n$ deathYear    <int> NA, 2021, 1984, NA, NA, NA, 1905, 1957, 1962, 1926, NA, 1…\n$ deathMonth   <int> NA, 1, 8, NA, NA, NA, 5, 1, 6, 4, NA, 2, 6, NA, NA, NA, N…\n$ deathDay     <int> NA, 22, 16, NA, NA, NA, 17, 6, 11, 27, NA, 13, 11, NA, NA…\n$ deathCountry <chr> NA, \"USA\", \"USA\", NA, NA, NA, \"USA\", \"USA\", \"USA\", \"USA\",…\n$ deathState   <chr> NA, \"GA\", \"GA\", NA, NA, NA, \"NJ\", \"FL\", \"VT\", \"CA\", NA, \"…\n$ deathCity    <chr> NA, \"Atlanta\", \"Atlanta\", NA, NA, NA, \"Pemberton\", \"Fort …\n$ nameFirst    <chr> \"David\", \"Hank\", \"Tommie\", \"Don\", \"Andy\", \"Fernando\", \"Jo…\n$ nameLast     <chr> \"Aardsma\", \"Aaron\", \"Aaron\", \"Aase\", \"Abad\", \"Abad\", \"Aba…\n$ nameGiven    <chr> \"David Allan\", \"Henry Louis\", \"Tommie Lee\", \"Donald Willi…\n$ weight       <int> 215, 180, 190, 190, 184, 235, 192, 170, 175, 169, 220, 19…\n$ height       <int> 75, 72, 75, 75, 73, 74, 72, 71, 71, 68, 74, 71, 70, 78, 7…\n$ bats         <fct> R, R, R, R, L, L, R, R, R, L, R, R, R, R, R, L, R, L, L, …\n$ throws       <fct> R, R, R, R, L, L, R, R, R, L, R, R, R, R, L, L, R, L, R, …\n$ debut        <chr> \"2004-04-06\", \"1954-04-13\", \"1962-04-10\", \"1977-07-26\", \"…\n$ bbrefID      <chr> \"aardsda01\", \"aaronha01\", \"aaronto01\", \"aasedo01\", \"abada…\n$ finalGame    <chr> \"2015-08-23\", \"1976-10-03\", \"1971-09-26\", \"1990-10-03\", \"…\n$ retroID      <chr> \"aardd001\", \"aaroh101\", \"aarot101\", \"aased001\", \"abada001…\n$ deathDate    <date> NA, 2021-01-22, 1984-08-16, NA, NA, NA, 1905-05-17, 1957…\n$ birthDate    <date> 1981-12-27, 1934-02-05, 1939-08-05, 1954-09-08, 1972-08-…\n```\n\n\n:::\n:::\n\nWe can see column names `nameFirst` and `nameLast`. \n\n\n\n(@) **[R]** Use `left_join()` to create a table of the top home run hitters. The data table should have variables *playerID*, *nameFirst*, *nameLast*, and *HR*. Overwrite the object `top10` with this new table, and print it out.\n\n::: {.cell}\n\n```{.r .cell-code}\n## code\n```\n:::\n\n\n(@) **[Python]** Import the data `People.csv`. Use `merge()` to create a table of the top home run hitters. The data table should have variables *playerID*, *nameFirst*, *nameLast*, and *HR*. Overwrite the object `top10` with this new table, and print it out.\n\n::: {.cell}\n\n```{.python .cell-code}\n\n## code\n```\n:::\n\n\n\n(@) **[R]** Use the `Fielding` data frame to add each player's position to the data `top10`. You filter `Fielding` for the year 2023 first, then use `right_join()`. This time show *nameFirst*, *nameLast*, *teamID*, *HR*, and *POS*. Make sure the data are ordered by `HR` decreasingly.\n\n::: {.cell}\n\n```{.r .cell-code}\n## code\n```\n:::\n\n\n(@) **[Python]** Import the data `Fielding.csv`. Use it to add each player's position to the data `top10`. You query `Fielding` for the year 2023 first, then use `merge()`. This time show *nameFirst*, *nameLast*, *teamID*, *HR*, and *POS*. Make sure the data are ordered by `HR` decreasingly.\n\n::: {.cell}\n\n```{.python .cell-code}\n\n## code\n```\n:::\n\n\n## Pivoting\n\n::: {.cell}\n\n```{.r .cell-code}\nco2_wide <- data.frame(matrix(co2, ncol = 12, byrow = TRUE)) |> \n    setNames(1:12) |> \n    mutate(year = as.character(1959:1997))\n```\n:::\n\n(@) **[R]** Use the `pivot_longer()` function to make `co2_wide` tidy. The pivoted columns are `1` to `12`. Call the column with the CO2 measurements `co2` and call the month column `month`. Call the resulting object `co2_tidy`. Print it out.\n\n::: {.cell}\n\n```{.r .cell-code}\n## code\n```\n:::\n\n\n\n(@) **[Python]** Import `co2_wide.csv`. Generate the data as `co2_tidy`.\n\n::: {.cell}\n\n```{.python .cell-code}\n\n## code\n```\n:::\n\n\n\n# Data Visualization\n\nIn this section all the plots should be generated using **ggplot2** with R.\n\n\n\n## murders\n\nUse `murders` to make plots.\n\n\n(@) Create a scatter plot of total murders (x-axis) versus population sizes (y-axis) using the pipe operator `|>` that the murders data set is on the left to `|>`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## code\n```\n:::\n\n\n(@) Generate the plot below using `label` and `color` aesthetics in `aes()` and a geometry layer `geom_label()`. Save the ggplot object as `p`. Here, we add abbreviation as the label, and make the labels' color be determined by the state's region.\n\n::: {.cell}\n\n```{.r .cell-code}\n## code\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](./img/murder_label.png){width=656}\n:::\n:::\n\n\n\n(@) Use the object `p` and \n\n  + Change both axes to be in the $\\log_{10}$ scale using [`scale_x_log10()`](https://ggplot2.tidyverse.org/reference/scale_continuous.html) and `scale_y_log10()`\n  + Add a title \"Gun murder data\"\n  + Use the wall street journal theme in [**ggthemes**](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/).\n\n::: {.cell}\n\n```{.r .cell-code}\n## code\n```\n:::\n\n\n\n\n## mpg\n\nUse `mpg` to make plots.\n\n(@) What's gone wrong with this code? Why are the points not blue? Change it so that the points are colored in blue.\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg |> ggplot(mapping = aes(x = displ, y = hwy, colour = \"blue\")) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](hw2_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n(@) Generate the bar chart below.\n\n::: {.cell}\n\n```{.r .cell-code}\n## code\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](./img/mpg_bar.png){width=662}\n:::\n:::\n\n\n\n(@) Complete the code to generate the boxplot below. Note that `x = class` and `y = hwy`, so the coordinates need to be flipped.\n\n::: {.cell}\n\n```{.r .cell-code}\n## code\n```\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](./img/mpg_boxplot.png){width=665}\n:::\n:::\n\n\n(@) Generate the histogram below with *density* scale. Map `y` to the internal variable `..density..` (`after_stat(density)`) to show density values. Put the legend inside the plot at `c(0.9, 0.15)`. (check ?theme help page)\n\n::: {.cell}\n\n```{.r .cell-code}\n## code\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](./img/mpg_hist.png){width=664}\n:::\n:::\n\n\n\n(@) Generate the scatter plot below. \n\n::: {.cell}\n\n```{.r .cell-code}\n## code\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](./img/mpg_text.png){width=670}\n:::\n:::\n",
    "supporting": [
      "hw2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}