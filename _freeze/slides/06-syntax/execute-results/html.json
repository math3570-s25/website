{
  "hash": "206a08d505a51d137f503f9555fcb563",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Basic R `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html} and Python `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>`{=html} '\nsubtitle: \"MATH/COSC 3570 Introduction to Data Science\"\nauthor: \"Dr. Cheng-Han Yu <br> Department of Mathematical and Statistical Sciences <br> Marquette University\"\n# date: \"January 30 2025\"\n# macros: _macros.tex # import a list of TeX/LaTeX definitions\nformat: \n  revealjs:\n    #     - \"macros.tex\"\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n    # include-in-header:\n    highlight-style: github\n    code-block-bg: true\n    self-contained: false\n    slide-number: c/t\n    incremental: false\n    width: 1800\n    height: 1000\n    margin: 0.05\n    logo: \"https://upload.wikimedia.org/wikipedia/commons/e/e8/Marquette_Golden_Eagles_logo.svg\"\n    footer: \"[math3570-s25.github.io/website](https://math3570-s25.github.io/website/)\"\n    theme: [\"simple\", \"slides.scss\"]\n    echo: false\n    multiplex: true\n    code-link: true\n    fig-cap-location: bottom\n    fig-align: center\n    transition: none ## fade slide convex concave zoom\n    # code-line-numbers: false\n    title-slide-attributes:\n      data-background-color: \"#447099\"\n      # data-background-image: images/paper-texture.jpg\n      # data-background-size: cover\n      # data-background-color: \"#698ED5\"\neditor: source\nexecute:\n  freeze: true\n  eval: true\nfig-cap-location: bottom\n---\n\n#  {visibility=\"hidden\"}\n\n\\def\\bx{\\mathbf{x}}\n\\def\\bg{\\mathbf{g}}\n\\def\\bw{\\mathbf{w}}\n\\def\\bbeta{\\boldsymbol \\beta}\n\\def\\bX{\\mathbf{X}}\n\\def\\by{\\mathbf{y}}\n\\def\\bH{\\mathbf{H}}\n\\def\\bI{\\mathbf{I}}\n\\def\\bS{\\mathbf{S}}\n\\def\\bW{\\mathbf{W}}\n\\def\\T{\\text{T}}\n\\def\\cov{\\mathrm{Cov}}\n\\def\\cor{\\mathrm{Corr}}\n\\def\\var{\\mathrm{Var}}\n\\def\\E{\\mathrm{E}}\n\\def\\bmu{\\boldsymbol \\mu}\n\\DeclareMathOperator*{\\argmin}{arg\\,min}\n\\def\\Trace{\\text{Trace}}\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\nUsing virtual environment '/Users/chenghanyu/.virtualenvs/r-reticulate' ...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUsing virtual environment '/Users/chenghanyu/.virtualenvs/r-reticulate' ...\n```\n\n\n:::\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n<!-- # Basic R and Python  -->\n\n## Run Code in Console\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n- `reticulate::repl_python()` to Python.\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./images/06-syntax/console-r.png){fig-align='center' width=70%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./images/06-syntax/console-py.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n::: {.fragment}\n\n- `quit` or `exit` to switch back to R.\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./images/06-syntax/console-py-quit.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n:::\n\n\n::::\n\n\n\n## Arithmetic and Logical Operators\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./images/01-syllabus/Rlogo.png){fig-align='center' width=10%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n2 + 3 / (5 * 4) ^ 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.01\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n5 == 5.00\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# 5 and 5L are of the same value too\n# 5 is of type double; 5L is integer\n5 == 5L\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ntypeof(5L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n!TRUE == FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n::: {.fragment}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://upload.wikimedia.org/wikipedia/commons/c/c3/Python-logo-notext.svg){fig-align='center' width=8%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n2 + 3 / (5 * 4) ** 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2.0075\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n5 == 5.00\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTrue\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n5 == int(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTrue\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ntype(int(5))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'int'>\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nnot True == False\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTrue\n```\n\n\n:::\n:::\n:::\n:::\n\n\n::::\n\n\n::: notes\nrepl_python()\n:::\n\n## Arithmetic and Logical Operators\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n<!-- # ```{r} -->\n<!-- # #| out-width: 10% -->\n<!-- # #| fig-align: center -->\n<!-- # knitr::include_graphics(\"./images/01-syllabus/Rlogo.png\") -->\n<!-- # ``` -->\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./images/01-syllabus/Rlogo.png){fig-align='center' width=10%}\n:::\n:::\n\n**Type coercion**: When doing AND/OR comparisons, all nonzero values are treated as `TRUE` and 0 as `FALSE`.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n-5 | 0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n1 & 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n2 | 0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n:::\n\n\n::: {.column width=\"50%\"}\n::: {.fragment}\n\n<!-- # ```{r} -->\n<!-- # #| out-width: 10% -->\n<!-- # #| fig-align: center -->\n<!-- # knitr::include_graphics(\"https://upload.wikimedia.org/wikipedia/commons/c/c3/Python-logo-notext.svg\") -->\n<!-- # ``` -->\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://upload.wikimedia.org/wikipedia/commons/c/c3/Python-logo-notext.svg){fig-align='center' width=8%}\n:::\n:::\n\n`bool()` converts nonzero numbers to `True` and zero to `False`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n-5 | 0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n-5\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n1 & 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nbool(2) | bool(0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTrue\n```\n\n\n:::\n:::\n:::\n:::\n\n::::\n\n\n## Math Functions\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./images/01-syllabus/Rlogo.png){fig-align='center' width=10%}\n:::\n:::\n\nMath functions in R are built-in.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nsqrt(144)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nexp(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.72\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nsin(pi/2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nlog(32, base = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nabs(-7)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# R comment\n```\n:::\n\n:::\n\n\n::: {.column width=\"50%\"}\n::: {.fragment}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://upload.wikimedia.org/wikipedia/commons/c/c3/Python-logo-notext.svg){fig-align='center' width=8%}\n:::\n:::\n\nNeed to import math library in Python.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nimport math\nmath.sqrt(144)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n12.0\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nmath.exp(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2.718281828459045\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nmath.sin(math.pi/2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1.0\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nmath.log(32, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n5.0\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nabs(-7)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n7\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n# python comment\n```\n:::\n\n:::\n\n:::\n\n::::\n\n\n##\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./images/06-syntax/cat_comment.png){fig-align='center' width=100%}\n:::\n:::\n:::\n\n\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./images/06-syntax/stop_comment.png){fig-align='center' width=100%}\n:::\n:::\n:::\n::::\n\n\n\n## Variables and Assignment\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./images/01-syllabus/Rlogo.png){fig-align='center' width=10%}\n:::\n:::\n\nUse `<-` to do **assignment**. [Why](https://colinfay.me/r-assignment/)\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## we create an object, value 5, \n## and call it x, which is a variable\nx <- 5\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n(x <- x + 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nx == 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nlog(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.4\n```\n\n\n:::\n:::\n\n:::\n\n\n::: {.column width=\"50%\"}\n::: {.fragment}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://upload.wikimedia.org/wikipedia/commons/c/c3/Python-logo-notext.svg){fig-align='center' width=8%}\n:::\n:::\n\nUse `=` to do assignment.\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nx = 5\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n5\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nx = x + 6\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n11\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nx == 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFalse\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nmath.log(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2.3978952727983707\n```\n\n\n:::\n:::\n\n:::\n\n:::\n\n::::\n\n\n## Object Types\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./images/01-syllabus/Rlogo.png){fig-align='center' width=10%}\n:::\n:::\n\n**`character`**, **`double`**, **`integer`** and **`logical`**.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ntypeof(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ntypeof(5L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ntypeof(\"I_love_data_science!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ntypeof(1 > 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nis.double(5L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n:::\n\n\n::: {.column width=\"50%\"}\n::: {.fragment}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://upload.wikimedia.org/wikipedia/commons/c/c3/Python-logo-notext.svg){fig-align='center' width=8%}\n:::\n:::\n\n\n**`str`**, **`float`**, **`int`** and **`bool`**.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ntype(5.0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'float'>\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ntype(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'int'>\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ntype(\"I_love_data_science!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'str'>\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ntype(1 > 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'bool'>\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ntype(5) is float\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFalse\n```\n\n\n:::\n:::\n\n:::\n:::\n::::\n\n::: notes\npython long (long integers, they can also be represented in octal and hexadecimal)\n:::\n\n\n\n\n# R Data Structures {background-color=\"#A7D5E8\"}\n\n- ### Vector\n- ### Factor\n- ### List\n- ### Matrix\n- ### Data Frame\n\n\n##\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/hadley/adv-r/master/diagrams/vectors/summary-tree-atomic.png){fig-align='center' width=100%}\n:::\n:::\n:::\n\n\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/hadley/adv-r/master/diagrams/vectors/summary-tree.png){fig-align='center' width=100%}\n:::\n:::\n:::\n\n::::\n\n- Variable defined previously is a **scalar** value, or in fact a (atomic) **vector of length one**.\n\n\n\n## (Atomic) Vector\n\n- To create a vector, use `c()`, short for *concatenate* or *combine*.\n- **All** elements of a vector must be of the **same type**. \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n(dbl_vec <- c(1, 2.5, 4.5)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.0 2.5 4.5\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n(int_vec <- c(1L, 6L, 10L))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  6 10\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## TRUE and FALSE can be written as T and F\n(log_vec <- c(TRUE, FALSE, F))  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n(chr_vec <- c(\"pretty\", \"girl\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"pretty\" \"girl\"  \n```\n\n\n:::\n:::\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## check how many elements in a vector\nlength(dbl_vec) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## check a compact description of \n## any R data structure\nstr(dbl_vec) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n num [1:3] 1 2.5 4.5\n```\n\n\n:::\n:::\n:::\n::::\n\n\n\n\n## Sequence of Numbers\n\n- Use `:` to create a sequence of *integers*.\n- Use `seq()` to create a sequence of numbers of type `double` with more options.\n<!-- - Vectors created by `seq()` are  -->\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n(vec <- 1:5) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ntypeof(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# a sequence of numbers from 1 to 10 with increment 2\n(seq_vec <- seq(from = 1, to = 10, by = 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 5 7 9\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ntypeof(seq_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n## Operations on Vectors\n\n- We can do any operations on vectors as we do on a *scalar* variable (vector of length 1).\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Create two vectors\nv1 <- c(3, 8)\nv2 <- c(4, 100) \n\n## All operations happen element-wisely\n# Vector addition\nv1 + v2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]   7 108\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Vector subtraction\nv1 - v2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  -1 -92\n```\n\n\n:::\n:::\n:::\n\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Vector multiplication\nv1 * v2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  12 800\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Vector division\nv1 / v2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.75 0.08\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nsqrt(v2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2 10\n```\n\n\n:::\n:::\n:::\n::::\n\n\n\n## Recycling of Vectors\n\n- If we apply arithmetic operations to two vectors of **unequal** length, the elements of the shorter vector will be **recycled** to complete the operations.\n<!-- - Beware of recycling! -->\n<!-- - The concept of *recycling* helps us write more concise code. -->\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nv1 <- c(3, 8, 4, 5)\n# The following 2 operations are the same\nv1 * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  6 16  8 10\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nv1 * c(2, 2, 2, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  6 16  8 10\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nv3 <- c(4, 11)\nv1 + v3  ## v3 becomes c(4, 11, 4, 11) when doing the operation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  7 19  8 16\n```\n\n\n:::\n:::\n\n\n## Subsetting Vectors\n\n- To extract element(s) in a vector, we use a pair of brackets `[]` with element indexing.\n- The indexing **starts with 1**.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nv1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 8 4 5\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nv2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]   4 100\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## The 3rd element\nv1[3] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n:::\n\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nv1[c(1, 3)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 4\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nv1[1:2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 8\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## extract all except a few elements\n## put a negative sign before the vector of \n## indices\nv1[-c(2, 3)] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 5\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n:::\n::::\n\n\n\n\n## Factor\n\n- A vector of type `factor` can be *ordered in a meaningful way.* Create a factor by `factor()`. \n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## Create a factor from a character vector using function factor()\n(fac <- factor(c(\"med\", \"high\", \"low\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] med  high low \nLevels: high low med\n```\n\n\n:::\n:::\n\n. . .\n\n\n- It is a type of **integer**, not **character**. 😲  🙄 \n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ntypeof(fac)  ## The type is integer.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nstr(fac)  ## The integers show the level each element in vector fac belongs to.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Factor w/ 3 levels \"high\",\"low\",\"med\": 3 1 2\n```\n\n\n:::\n:::\n\n. . .\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\norder_fac <- factor(c(\"med\", \"high\", \"low\"),\n                    levels = c(\"low\", \"med\", \"high\"))\nstr(order_fac)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Factor w/ 3 levels \"low\",\"med\",\"high\": 2 3 1\n```\n\n\n:::\n:::\n\n\n::: notes\nlevels(fac) ## Each level represents an integer, ordered from the vector alphabetically.\n:::\n\n\n## List (Generic Vectors)\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/hadley/adv-r/master/diagrams/vectors/summary-tree.png){fig-align='center' width=18%}\n:::\n:::\n\n\n- Lists are different from (atomic) vectors: Elements can be of **any type**, including lists.\n\n- Construct a list by using **`list()`**.\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## a list of 3 elements of different types\nx_lst <- list(idx = 1:3, \n              \"a\", \n              c(TRUE, FALSE))\n```\n:::\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n$idx\n[1] 1 2 3\n\n[[2]]\n[1] \"a\"\n\n[[3]]\n[1]  TRUE FALSE\n```\n\n\n:::\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nstr(x_lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 3\n $ idx: int [1:3] 1 2 3\n $    : chr \"a\"\n $    : logi [1:2] TRUE FALSE\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nnames(x_lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"idx\" \"\"    \"\"   \n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nlength(x_lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n:::\n::::\n\n\n## Subsetting a List\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n<br>\n**Return an <span style=\"color:red\"> element </span> of a list**\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## subset by name (a vector)\nx_lst$idx  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## subset by indexing (a vector)\nx_lst[[1]]  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ntypeof(x_lst$idx)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: {.fragment}\n<br>\n**Return a <span style=\"color:red\"> sub-list </span> of a list**\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## subset by name (still a list)\nx_lst[\"idx\"]  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$idx\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## subset by indexing (still a list)\nx_lst[1]  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$idx\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ntypeof(x_lst[\"idx\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n:::\n:::\n::::\n\n::: notes\n- This is where we should pay more attention to. When we subset a list, it may return an element of the list, or it returns a sub-list of the list.\n- Let's see how it happens. \n- This is our x_lst. We can subset a list by name or by indexing. \n- Suppose we want the first element of the list, we can get it by its name using x_lst$idx.\n- We can also obtain it by using indexing like x_lst[[1]] because we want the first element.\n- Notice that the way we subset a list returns an integer vector, the real first element of the list, not a list. \n- Let's see another case on the right.\n- We can also subset by name using single pair of brackets, and put the name inside the brackets.\n- Or we can subset by indexing, again using single pair of brackets.\n- And you see what happened? The way we subset a list here returns a sub-list, not the element itself. \n- So please be careful when subsetting a list. \n- If you want a vector, use these ways. If you want to keep it as a list, use these ways.\n:::\n\n##\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./images/06-syntax/list_condiment.png){fig-align='center' width=100%}\n:::\n:::\n\n::: notes\npepper packet\npepper shaker\n:::\n\n\n\n##\n\n> If list `x` is a train carrying objects, then `x[[5]]` is\n> the object in car 5; `x[4:6]` is a train of cars 4-6.\n>\n> --- \\@RLangTip, <https://twitter.com/RLangTip/status/268375867468681216>\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/hadley/adv-r/master/diagrams/subsetting/train.png){fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/hadley/adv-r/master/diagrams/subsetting/train-single.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Matrix\n\n- A matrix is a *two-dimensional analog of a vector* with **attribute** `dim`.\n- Use command `matrix()` to create a matrix.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## Create a 3 by 2 matrix called mat\n(mat <- matrix(data = 1:6, nrow = 3, ncol = 2)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ndim(mat); nrow(mat); ncol(mat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n::: notes\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$dim\n[1] 3 2\n```\n\n\n:::\n:::\n:::\n\n\n## Row and Column Names  {visibility=\"hidden\"}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nmat\n## assign row names and column names\nrownames(mat) <- c(\"A\", \"B\", \"C\")\ncolnames(mat) <- c(\"a\", \"b\")\nmat\n```\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nrownames(mat)\ncolnames(mat)\nattributes(mat)\n```\n:::\n\n:::\n\n::::\n\n\n\n\n## Subsetting a Matrix \n\n- Use the same indexing approach as vectors on rows and columns.\n- Use comma `,` to separate row and column index.\n- `mat[2, 2]` extracts the element of the second row and second column.\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## all rows and 2nd column\n## leave row index blank\n## specify 2 in coln index\nmat[, 2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 5 6\n```\n\n\n:::\n:::\n:::\n\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## 2nd row and all columns\nmat[2, ] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 5\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## The 1st and 3rd rows and the 1st column\nmat[c(1, 3), 1] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3\n```\n\n\n:::\n:::\n:::\n::::\n\n\n\n## Binding Matrices\n\n- `cbind()` (binding matrices by adding columns)\n\n- `rbind()` (binding matrices by adding rows)\n  \n- When matrices are combined by columns (rows), they should have the same number of rows (columns).\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nmat_c <- matrix(data = c(7,0,0,8,2,6), \n                nrow = 3, ncol = 2)\n## should have the same number of rows\ncbind(mat, mat_c)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7    8\n[2,]    2    5    0    2\n[3,]    3    6    0    6\n```\n\n\n:::\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nmat_r <- matrix(data = 1:4, \n                nrow = 2, \n                ncol = 2)\n## should have the same number of columns\nrbind(mat, mat_r)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n[4,]    1    3\n[5,]    2    4\n```\n\n\n:::\n:::\n:::\n::::\n\n\n\n## Data Frame: The Most Common Way of Storing Datasets\n\n- A data frame is of type **list** of *equal-length* vectors, having a *2-dimensional* structure.\n- More general than matrix: *Different columns can have different types*.\n- Use `data.frame()` that takes *named* vectors as input \"element\".\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## data frame w/ an dbl column named age\n## and char column named gender.\n(df <- data.frame(age = c(19, 21, 40), \n                  gen = c(\"m\", \"f\", \"m\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age gen\n1  19   m\n2  21   f\n3  40   m\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## a data frame has a list structure\nstr(df)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3 obs. of  2 variables:\n $ age: num  19 21 40\n $ gen: chr  \"m\" \"f\" \"m\"\n```\n\n\n:::\n:::\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## must set column names\n## or they are ugly and non-recognizable\ndata.frame(c(19, 21, 40), c(\"m\", \"f\", \"m\")) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  c.19..21..40. c..m....f....m..\n1            19                m\n2            21                f\n3            40                m\n```\n\n\n:::\n:::\n:::\n::::\n\n\n## Properties of Data Frames\n\nData frame has properties of matrix and list.\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nnames(df)  ## df as a list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"age\" \"gen\"\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ncolnames(df)  ## df as a matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"age\" \"gen\"\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nlength(df) ## df as a list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nncol(df) ## df as a matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ndim(df) ## df as a matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 2\n```\n\n\n:::\n:::\n:::\n\n\n::: {.column width=\"60%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## rbind() and cbind() can be used on df\ndf_r <- data.frame(age = 10, \n                   gen = \"f\")\nrbind(df, df_r)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age gen\n1  19   m\n2  21   f\n3  40   m\n4  10   f\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ndf_c <- \n    data.frame(col = c(\"red\",\"blue\",\"gray\"))\n(df_new <- cbind(df, df_c))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age gen  col\n1  19   m  red\n2  21   f blue\n3  40   m gray\n```\n\n\n:::\n:::\n\n:::\n::::\n\n\n## Subsetting a Data Frame\n\nCan use either list or matrix subsetting methods.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ndf_new\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age gen  col\n1  19   m  red\n2  21   f blue\n3  40   m gray\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## Subset rows\ndf_new[c(1, 3), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age gen  col\n1  19   m  red\n3  40   m gray\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## select the row where age == 21\ndf_new[df_new$age == 21, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age gen  col\n2  21   f blue\n```\n\n\n:::\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## Subset columns\n## like a list\ndf_new$age\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19 21 40\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ndf_new[c(\"age\", \"gen\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age gen\n1  19   m\n2  21   f\n3  40   m\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## like a matrix\ndf_new[, c(\"age\", \"gen\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age gen\n1  19   m\n2  21   f\n3  40   m\n```\n\n\n:::\n:::\n:::\n::::\n\n\n\n\n::: notes\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n  age gen  col\n1  19   m  red\n3  40   m gray\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3 obs. of  1 variable:\n $ age: num  19 21 40\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n num [1:3] 19 21 40\n```\n\n\n:::\n:::\n:::\n\n\n##\n\n:::::{.lab}\n\n<span style=\"color:blue\"> **05-R Data Type Summary** </span>\n\n<!-- - Create a R script named **lab03-datatype.R**. -->\nIn **lab.qmd** Lab 5,\n\n- Create R objects vector `v1`, factor `f2`, list `l3`, matrix `m4` and data frame `d5`.\n\n- Check `typeof()` and `class()` of those objects, and create a list having the output below.\n\n:::: {.columns}\n\n::: {.midi}\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nv1 <- __________\nf2 <- __________\nl3 <- __________\nm4 <- __________\nd5 <- __________\nv <- c(type = typeof(v1), class = class(v1))\nf <- c(type = __________, class = _________)\nl <- c(type = __________, class = _________)\nm <- c(type = __________, class = _________)\nd <- c(type = __________, class = _________)\n____(vec    =   v,\n     ______ = ___,\n     ______ = ___,\n     ______ = ___,\n     ______ = ___)\n```\n:::\n:::\n\n\n\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n``` my_classfull\n$vec\n     type     class \n \"double\" \"numeric\" \n\n$fac\n     type     class \n\"integer\"  \"factor\" \n\n$lst\n  type  class \n\"list\" \"list\" \n\n$mat\n     type    class1    class2 \n\"integer\"  \"matrix\"   \"array\" \n\n$df\n        type        class \n      \"list\" \"data.frame\" \n```\n\n\n:::\n:::\n\n:::\n:::\n::::\n:::::\n\n\n\n# Python Data Structures  {background-color=\"#ffde57\"}\n\n- ### List\n- ### Tuple\n- ### Dictionary\n\n\n<!-- ## Change Console to Python -->\n\n<!-- - Type `reticulate::repl_python()` to change Console to Python. -->\n\n<!-- - Type `quit` or `exit` to change Console back to R. -->\n\n## Python Lists\n\n- Python has *numbers* and *strings*, but no built-in vector structure.\n- To create a sequence type of structure, we can use a **list** that can save several elements in an single object. \n- To create a list in Python, we use `[]`.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nlst_num = [0, 2, 4] \nlst_num\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[0, 2, 4]\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ntype(lst_num)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'list'>\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nlen(lst_num)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n3\n```\n\n\n:::\n:::\n:::\n\n\n::: {.column width=\"50%\"}\n\nList elements can have [*different types*]{style=\"color:green\"}!\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nlst = ['data', 'math', 34, True]\nlst\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['data', 'math', 34, True]\n```\n\n\n:::\n:::\n:::\n::::\n\n\n\n\n## Subsetting Lists\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- Indexing in Python **always starts at 0**!\n- `0`: the 1st element\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nlst\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['data', 'math', 34, True]\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nlst[0]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data'\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ntype(lst[0]) ## not a list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'str'>\n```\n\n\n:::\n:::\n\n- `-1`: the last element\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nlst[-2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n34\n```\n\n\n:::\n:::\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n- `[a:b]`: the (a+1)-th to b-th elements\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nlst[1:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['math', 34, True]\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ntype(lst[1:4]) ## a list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'list'>\n```\n\n\n:::\n:::\n\n- `[a:]`: elements from the (a+1)-th to the last\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nlst[2:]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[34, True]\n```\n\n\n:::\n:::\n\n:::\n::::\n\n::: {.question}\nWhat does `lst[0:1]` return? Is it a list?\n:::\n\n\n::: notes\n\n::: {.question}\nWhat does `lst[0:1]` return? Is it a list?\n:::\n\n:::\n\n\n\n## Lists are Mutable\n\nLists are **changed in place**!\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nlst[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'math'\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nlst[1] = \"stats\"\nlst\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['data', 'stats', 34, True]\n```\n\n\n:::\n:::\n:::\n\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nlst[2:] = [False, 77]\nlst\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['data', 'stats', False, 77]\n```\n\n\n:::\n:::\n:::\n\n::::\n\n\n::: notes\nIf we change any element value in a list, the list itself will be changed as well.\n:::\n\n\n## List Operations and Methods [`list.method()`](https://docs.python.org/3/tutorial/datastructures.html)\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n## Concatenation\nlst_num + lst\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[0, 2, 4, 'data', 'stats', False, 77]\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n## Repetition\nlst_num * 3 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[0, 2, 4, 0, 2, 4, 0, 2, 4]\n```\n\n\n:::\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n## Membership\n34 in lst\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFalse\n```\n\n\n:::\n:::\n\n:::\n\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n## Appends \"cat\" to lst\nlst.append(\"cat\")\nlst\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['data', 'stats', False, 77, 'cat']\n```\n\n\n:::\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n## Removes and returns last object from list\nlst.pop()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'cat'\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nlst\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['data', 'stats', False, 77]\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n## Removes object from list\nlst.remove(\"stats\")\nlst\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['data', False, 77]\n```\n\n\n:::\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n## Reverses objects of list in place\nlst.reverse()\nlst\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[77, False, 'data']\n```\n\n\n:::\n:::\n\n:::\n::::\n\n\n\n::: notes\nThis is a common syntax in Python. We start with a Pyhton object of some type, then type dot followed by any method specifically for this particular data type or structure for operations.\nlist.pop(index)\n:::\n\n## [Tuples](https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences)\n\n- **Tuples** work exactly like lists except they are **immutable**, i.e., they can't be changed in place.\n\n- To create a tuple, we use `()`.\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ntup = ('data', 'math', 34, True)\ntup\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n('data', 'math', 34, True)\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ntype(tup)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'tuple'>\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nlen(tup)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n4\n```\n\n\n:::\n:::\n:::\n\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ntup[2:]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(34, True)\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ntup[-2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n34\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ntup[1] = \"stats\"  ## does not work!\n# TypeError: 'tuple' object does not support item assignment\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ntup\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n('data', 'math', 34, True)\n```\n\n\n:::\n:::\n\n:::\n::::\n\n\n:::notes\n'tuple' object does not support item assignment\n:::\n\n## Tuples Functions and Methods\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n# Converts a list into tuple\ntuple(lst_num)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(0, 2, 4)\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n# number of occurance of \"data\"\ntup.count(\"data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n# first index of \"data\"\ntup.index(\"data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0\n```\n\n\n:::\n:::\n\n\n\n:::{.callout-note}\n\n:::{style=\"font-size: 1.1em;\"}\nLists have more methods than tuples because lists are more flexible.\n:::\n\n:::\n\n\n## [Dictionaries](https://docs.python.org/3/tutorial/datastructures.html#dictionaries)\n\n- A **dictionary** consists of [*key-value pairs*]{style=\"color:green\"}.\n\n- A dictionary is mutable, i.e., the values can be changed in place and more key-value pairs can be added.\n\n- To create a dictionary, we use `{'key': value}`.\n\n- The value can be accessed by the key in the dictionary. \n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ndic = {'Name': 'Ivy', 'Age': 7, 'Class': 'First'}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ndic['Age']\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n7\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ndic['age']  ## does not work\n```\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ndic['Age'] = 9\ndic['Class'] = 'Third'\ndic\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{'Name': 'Ivy', 'Age': 9, 'Class': 'Third'}\n```\n\n\n:::\n:::\n\n\n\n## Properties of Dictionaries\n\n- Python will use the last assignment!\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ndic1 = {'Name': 'Ivy', 'Age': 7, 'Name': 'Liya'}\ndic1['Name']\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'Liya'\n```\n\n\n:::\n:::\n\n. . .\n\n- Keys are [*unique and immutable*]{style=\"color:green\"}. \n\n- A key can be a tuple, but CANNOT be a list.\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n## The first key is a tuple!\ndic2 = {('First', 'Last'): 'Ivy Lee', 'Age': 7}\ndic2[('First', 'Last')]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'Ivy Lee'\n```\n\n\n:::\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n## does not work\ndic2 = {['First', 'Last']: 'Ivy Lee', 'Age': 7}\ndic2[['First', 'Last']]\n```\n:::\n\n\n## Dictionary Methods\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n{'Name': 'Ivy', 'Age': 9, 'Class': 'Third'}\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ndic.keys() ## Returns list of dictionary dict's keys\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ndict_keys(['Name', 'Age', 'Class'])\n```\n\n\n:::\n:::\n\n<br>\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ndic.values() ## Returns list of dictionary dict's values\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ndict_values(['Ivy', 9, 'Third'])\n```\n\n\n:::\n:::\n\n<br>\n\n. . .\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ndic.items() ## Returns a list of dict's (key, value) tuple pairs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ndict_items([('Name', 'Ivy'), ('Age', 9), ('Class', 'Third')])\n```\n\n\n:::\n:::\n\n<br>\n\n. . .\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n## Adds dictionary dic2's key-values pairs in to dic\ndic2 = {'Gender': 'female'}\ndic.update(dic2)\ndic\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{'Name': 'Ivy', 'Age': 9, 'Class': 'Third', 'Gender': 'female'}\n```\n\n\n:::\n:::\n\n\n::: notes\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n## Removes all elements of dictionary dict\ndic.clear()\ndic\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{}\n```\n\n\n:::\n:::\n\n:::\n\n##\n\n:::{.lab}\n\n<span style=\"color:blue\"> **06-Python Data Structure** </span>\n\nIn **lab.qmd** Lab 6,\n\n- Create a Python list and dictionary similar to the R list below.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nx_lst <- list(idx = 1:3, \n              \"a\", \n              c(TRUE, FALSE))\n```\n:::\n\nRemember to create Python code chunk\n\n::: {.cell layout-align=\"center\"}\n\n````{.cell-code  code-line-numbers=\"false\"}\n```{{Python}}\n#| echo: true\n#| eval: false\n#| code-line-numbers: false\n\n```\n````\n:::\n\n[Any issue of this **P**ython chunk?]{.red}\n\n\nCommit and Push your work once you are done.\n:::\n\n\n\n## Python Data Structures for Data Science\n\n- Python built-in data structures are not specifically for data science.\n\n- To use more data science friendly functions and structures, such as array or data frame, Python relies on packages [`NumPy`](https://numpy.org/) and [`pandas`](https://pandas.pydata.org/).\n\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n[![](https://upload.wikimedia.org/wikipedia/commons/3/31/NumPy_logo_2020.svg){fig-align='center' width=100%}](https://numpy.org/)\n:::\n:::\n\n\n:::\n\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n[![](https://upload.wikimedia.org/wikipedia/commons/e/ed/Pandas_logo.svg){fig-align='center' width=100%}](https://pandas.pydata.org/)\n:::\n:::\n:::\n::::\n\n\n## Installing NumPy and pandas*\n\nIn your **lab-yourusername** project, run\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nlibrary(reticulate)\nvirtualenv_create(\"myenv\")\n```\n:::\n\n\n. . .\n\nGo to **Tools > Global Options > Python > Select > Virtual Environments**\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./images/06-syntax/python-env.png){fig-align='center' width=50%}\n:::\n:::\n\n\n\n## Installing NumPy and pandas*\n\nYou may need to restart R session. Do it, and in the new R session, run\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nlibrary(reticulate)\npy_install(c(\"numpy\", \"pandas\", \"matplotlib\"))\n```\n:::\n\n. . .\n\n\nRun the following Python code, and make sure everything goes well.\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nimport numpy as np\nimport pandas as pd\nv1 = np.array([3, 8])\nv1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\narray([3, 8])\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ndf = pd.DataFrame({\"col\": ['red', 'blue', 'green']})\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     col\n0    red\n1   blue\n2  green\n```\n\n\n:::\n:::\n\n\n\n\n# Descriptive Statistics (MATH 4720)\n\n- ### Central Tendency and Variability\n- ### Data Summary\n\n\n## Central Tendency: Mean and Median\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./images/01-syllabus/Rlogo.png){fig-align='center' width=10%}\n:::\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ndata <- c(3,12,56,9,230,22)\nmean(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 55.3\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nmedian(data)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 17\n```\n\n\n:::\n:::\n\n\n:::\n\n\n::: {.column width=\"50%\"}\n::: {.fragment}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n[![](https://upload.wikimedia.org/wikipedia/commons/c/c3/Python-logo-notext.svg){fig-align='center' width=8%}](https://numpy.org/doc/stable/reference/routines.statistics.html)\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ndata = np.array([3,12,56,9,230,22])\ntype(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'numpy.ndarray'>\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nnp.mean(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n55.333333333333336\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nnp.median(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n17.0\n```\n\n\n:::\n:::\n\n:::\n:::\n::::\n\n\n::: notes\n- The **(arithmetic) mean** or average is adding up all of the values, then dividing by the total number of them.\n- Mean balances data Values.\n- The **median** is the middle value when data values are arranged from the lowest to highest.\n- Mean is sensitive to extreme values (outliers).\n:::\n\n\n\n\n## Variation\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./images/01-syllabus/Rlogo.png){fig-align='center' width=10%}\n:::\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nquantile(data, c(0.25, 0.5, 0.75)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  25%   50%   75% \n 9.75 17.00 47.50 \n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nvar(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7677\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nsd(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 87.6\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    3.0     9.8    17.0    55.3    47.5   230.0 \n```\n\n\n:::\n:::\n\n\n:::\n\n\n::: {.column width=\"50%\"}\n::: {.fragment}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n[![](https://upload.wikimedia.org/wikipedia/commons/c/c3/Python-logo-notext.svg){fig-align='center' width=8%}](https://numpy.org/doc/stable/reference/routines.statistics.html)\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nnp.quantile(data,  [0.25, 0.5, 0.75])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\narray([ 9.75, 17.  , 47.5 ])\n```\n\n\n:::\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nnp.var(data, ddof = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n7676.666666666666\n```\n\n\n:::\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nnp.std(data, ddof = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n87.61658899242008\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ndf = pd.Series(data)\ndf.describe()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncount      6.000000\nmean      55.333333\nstd       87.616589\nmin        3.000000\n25%        9.750000\n50%       17.000000\n75%       47.500000\nmax      230.000000\ndtype: float64\n```\n\n\n:::\n:::\n\n:::\n:::\n::::\n\n::: notes\n\n- **p-th percentile**: a data value such that at most $p\\%$ of the data values are below it and at most $(1−p)\\%$ of the values are above it.\n- **First Quartile (Q1)**: the 25-th percentile\n- **Second Quartile (Q2)**: the 50-th percentile (Median)\n- **Third Quartile (Q3)**: the 75-th percentile\n- **Interquartile Range (IQR)**: Q3 - Q1\n\nIQR(data)\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nq75, q25 = np.percentile(data, [75 ,25])\nq75 - q25\n```\n:::\nDelta Degrees of Freedom.\n\n:::\n\n\n\n# Basic Plotting\n\n- ### Scatter Plot\n- ### Boxplot\n- ### Histogram\n- ### Bar Chart\n- ### Pie Chart\n- ### 2D Imaging\n- ### 3D Plotting\n\n\n\n## R `plot()`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nmtcars[1:15, 1:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` my_class800\n                    mpg cyl disp  hp\nMazda RX4          21.0   6  160 110\nMazda RX4 Wag      21.0   6  160 110\nDatsun 710         22.8   4  108  93\nHornet 4 Drive     21.4   6  258 110\nHornet Sportabout  18.7   8  360 175\nValiant            18.1   6  225 105\nDuster 360         14.3   8  360 245\nMerc 240D          24.4   4  147  62\nMerc 230           22.8   4  141  95\nMerc 280           19.2   6  168 123\nMerc 280C          17.8   6  168 123\nMerc 450SE         16.4   8  276 180\nMerc 450SL         17.3   8  276 180\nMerc 450SLC        15.2   8  276 180\nCadillac Fleetwood 10.4   8  472 205\n```\n\n\n:::\n:::\n:::\n\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nplot(x = mtcars$mpg, y = mtcars$hp, \n     xlab  = \"Miles per gallon\", \n     ylab = \"Horsepower\", \n     main = \"Scatter plot\", \n     col = \"red\", \n     pch = 5, las = 1)\n```\n\n::: {.cell-output-display}\n![](images/06-syntax/scatter-1.png){fig-align='center' width=100%}\n:::\n:::\n:::\n\n::::\n\n\n\n## Argument pch \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/06-syntax/unnamed-chunk-134-1.png){fig-align='center' width=100%}\n:::\n:::\n\n- The defualt is pch = 1\n\n\n\n## Python `matplotlib.pyplot`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-fold=\"true\" code-line-numbers=\"false\"}\nmtcars = pd.read_csv('./data/mtcars.csv')\nmtcars.iloc[0:15,0:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` my_class800\n     mpg  cyl   disp   hp\n0   21.0    6  160.0  110\n1   21.0    6  160.0  110\n2   22.8    4  108.0   93\n3   21.4    6  258.0  110\n4   18.7    8  360.0  175\n5   18.1    6  225.0  105\n6   14.3    8  360.0  245\n7   24.4    4  146.7   62\n8   22.8    4  140.8   95\n9   19.2    6  167.6  123\n10  17.8    6  167.6  123\n11  16.4    8  275.8  180\n12  17.3    8  275.8  180\n13  15.2    8  275.8  180\n14  10.4    8  472.0  205\n```\n\n\n:::\n:::\n:::\n\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nimport matplotlib.pyplot as plt\nplt.scatter(x = mtcars.mpg, \n            y = mtcars.hp, \n            color = \"r\")\nplt.xlabel(\"Miles per gallon\")\nplt.ylabel(\"Horsepower\")\nplt.title(\"Scatter plot\")\n```\n\n::: {.cell-output-display}\n![](images/06-syntax/unnamed-chunk-136-1.png){fig-align='center' width=100%}\n:::\n:::\n:::\n\n::::\n\n\n\n## R Subplots\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\npar(mfrow = c(1, 2))\nplot(x = mtcars$mpg, y = mtcars$hp, xlab = \"mpg\")\nplot(x = mtcars$mpg, y = mtcars$wt, xlab = \"mpg\")\n```\n\n::: {.cell-output-display}\n![](images/06-syntax/unnamed-chunk-137-3.png){fig-align='center' width=100%}\n:::\n:::\n\n## [Python Subplots](https://matplotlib.org/stable/gallery/subplots_axes_and_figures/subplots_demo.html)\n\n<!-- :::{.callout-note} -->\n\n<!-- :::{style=\"font-size: 1.2em;\"} -->\n- The command `plt.scatter()` is used for creating one single plot.\n\n- If multiple subplots are wanted in one single call, one can use [`plt.subplots()`](https://matplotlib.org/stable/gallery/subplots_axes_and_figures/subplots_demo.html)\n\n<!-- # ```{python} -->\n<!-- #| echo: true -->\n<!-- #| eval: false -->\n<!-- fig, (ax1, ax2) = plt.subplots(1, 2) -->\n<!-- ax1.scatter(x, y) -->\n<!-- ax2.plot(x, y) -->\n<!-- ``` -->\n\n<!-- ::: -->\n<!-- ::: -->\n\n<!-- - Check [Creating multiple subplots using `plt.subplots`]() for more details. -->\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nfig, (ax1, ax2) = plt.subplots(1, 2)\nax1.scatter(x = mtcars.mpg, y = mtcars.hp)\nax2.scatter(x = mtcars.mpg, y = mtcars.wt)\nax1.set_xlabel(\"mpg\")\nax2.set_xlabel(\"mpg\")\n```\n\n::: {.cell-output-display}\n![](images/06-syntax/unnamed-chunk-138-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## R `boxplot()`\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nboxplot(mpg ~ cyl, \n        data = mtcars, \n        col = c(\"blue\", \"green\", \"red\"), \n        las = 1, \n        horizontal = TRUE,\n        xlab = \"Miles per gallon\", \n        ylab = \"Number of cylinders\")\n```\n:::\n:::\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/06-syntax/unnamed-chunk-140-1.png){fig-align='center' width=100%}\n:::\n:::\n:::\n::::\n\n::: notes\n- Visualizing relationships between numerical and categorical data, we can check side-by-side boxplots.\n- For example, if we want to check the data variation of (miles per gallon) for each number of cylinder, we can use boxplot() function.\n- And inside the function, we use the formula mpg ~ cyl, and specify the dataset. \n- That is basically it. The rest of arguments are decorating your plot. They are optional.\n:::\n\n\n## Python `boxplot()`\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-fold=\"true\" code-line-numbers=\"false\"}\ncyl_num = np.unique(mtcars.cyl)\ncyl_list = []\ncyl_list.append(mtcars[mtcars.cyl == cyl_num[0]].mpg)\ncyl_list.append(mtcars[mtcars.cyl == cyl_num[1]].mpg)\ncyl_list.append(mtcars[mtcars.cyl == cyl_num[2]].mpg)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nimport matplotlib.pyplot as plt\nplt.boxplot(cyl_list, vert=False, tick_labels=[4, 6, 8])\n```\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nplt.xlabel(\"Miles per gallon\")\nplt.ylabel(\"Number of cylinders\")\n```\n\n::: {.cell-output-display}\n![](images/06-syntax/boxplot-py-1.png){fig-align='center' width=60%}\n:::\n:::\n\n\n\n\n## R `hist()`\n\n- `hist()` decides the class intervals/with based on `breaks`. If not provided, R chooses one.\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nhist(mtcars$wt, \n     breaks = 20, \n     col = \"#003366\", \n     border = \"#FFCC00\", \n     xlab = \"weights\", \n     main = \"Histogram of weights\",\n     las = 1)\n```\n:::\n:::\n\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/06-syntax/unnamed-chunk-144-1.png){fig-align='center' width=90%}\n:::\n:::\n:::\n::::\n\n\n::: notes\n- Besides color names, you can also use hex number to specify colors. Pretty handy.\n:::\n\n\n## [Python `hist()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hist.html)\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n## by default bins=10\nplt.hist(mtcars.wt, \n         bins = 20, \n         color=\"#003366\",\n         edgecolor=\"#FFCC00\")\nplt.xlabel(\"weights\")\nplt.title(\"Histogram of weights\")\n```\n\n::: {.cell-output-display}\n![](images/06-syntax/unnamed-chunk-145-1.png){fig-align='center' width=60%}\n:::\n:::\n\n\n## R `barplot()`\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n(counts <- table(mtcars$gear)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n 3  4  5 \n15 12  5 \n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nmy_bar <- barplot(counts, \n                  main = \"Car Distribution\", \n                  xlab = \"Number of Gears\", \n                  las = 1)\ntext(x = my_bar, y = counts - 0.8, \n     labels = counts, \n     cex = 0.8)\n```\n\n::: {.cell-output-display}\n![](images/06-syntax/barplot-1.png){fig-align='center' width=60%}\n:::\n:::\n\n\n## [Python `barplot()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.bar.html)\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\ncount_py = mtcars.value_counts('gear')\ncount_py\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ngear\n3    15\n4    12\n5     5\nName: count, dtype: int64\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nplt.bar([\"3\", \"4\", \"5\"], count_py)\nplt.xlabel(\"Number of Gears\")\nplt.title(\"Car Distribution\")\n```\n\n::: {.cell-output-display}\n![](images/06-syntax/unnamed-chunk-148-1.png){fig-align='center' width=60%}\n:::\n:::\n\n\n## R `pie()`\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n(percent <- round(counts / sum(counts) * 100, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n   3    4    5 \n46.9 37.5 15.6 \n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n(labels <- paste0(3:5, \" gears: \", percent, \"%\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"3 gears: 46.88%\" \"4 gears: 37.5%\"  \"5 gears: 15.62%\"\n```\n\n\n:::\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\npie(x = counts, labels = labels,\n    main = \"Pie Chart\", \n    col = 2:4, \n    radius = 1)\n```\n\n::: {.cell-output-display}\n![](images/06-syntax/pie-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n::: notes\n- Pie charts are used for categorical variables, especially when we want to know percentage of each category.\n- The first argument is the frequency table, and you can add labels to each category.\n:::\n\n\n## Python `pie()`\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\npercent = round(count_py / sum(count_py) * 100, 2)\ntexts = (percent.index.astype(str) + \" gears: \" + percent.astype(str) + \"%\").tolist()\n```\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nplt.pie(count_py, labels = texts, colors = ['r', 'g', 'b'])\n```\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nplt.title(\"Pie Charts\")\n```\n\n::: {.cell-output-display}\n![](images/06-syntax/unnamed-chunk-152-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## R 2D Imaging: `image()`\n\n- The `image()` function displays the values in a matrix using color.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nmatrix(1:30, 6, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    7   13   19   25\n[2,]    2    8   14   20   26\n[3,]    3    9   15   21   27\n[4,]    4   10   16   22   28\n[5,]    5   11   17   23   29\n[6,]    6   12   18   24   30\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nimage(matrix(1:30, 6, 5))\n```\n:::\n:::\n\n\n::: {.column width=\"50%\"}\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/06-syntax/unnamed-chunk-154-1.png){fig-align='center' width=100%}\n:::\n:::\n:::\n\n::::\n\nIn [Python](https://matplotlib.org/stable/plot_types/arrays/imshow.html#sphx-glr-plot-types-arrays-imshow-py),\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-fold=\"true\" code-line-numbers=\"false\"}\nmatrix = np.arange(1, 31).reshape(5, 6)\nplt.imshow(matrix, cmap=\"viridis\", origin=\"lower\")\nplt.colorbar()\nplt.show()\n```\n:::\n\n\n\n## R `fields::image.plot()`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nlibrary(fields)\nstr(volcano)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n num [1:87, 1:61] 100 101 102 103 104 105 105 106 107 108 ...\n```\n\n\n:::\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nimage.plot(volcano)\n```\n:::\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n num [1:87, 1:61] 100 101 102 103 104 105 105 106 107 108 ...\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](images/06-syntax/unnamed-chunk-156-1.png){fig-align='center' width=100%}\n:::\n:::\n:::\n\n::::\n\n\n\n\n## R 2D Imaging Example: Volcano\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/06-syntax/unnamed-chunk-157-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n## R 3D scatter plot: `scatterplot3d()`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nlibrary(scatterplot3d)\nscatterplot3d(x = mtcars$wt, \n              y = mtcars$disp, \n              z = mtcars$mpg, \n              main = \"3D Scatter Plot\", \n              xlab = \"Weights\", \n              ylab = \"Displacement\",\n              zlab = \"Miles per gallon\", \n              pch = 16, \n              color = \"steelblue\")\n```\n:::\n:::\n\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/06-syntax/unnamed-chunk-159-1.png){fig-align='center' width=100%}\n:::\n:::\n:::\n\n::::\n\nIn [Python](https://matplotlib.org/stable/gallery/mplot3d/scatter3d.html#),\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-fold=\"true\" code-line-numbers=\"false\"}\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\nax.scatter(mtcars['wt'], mtcars['disp'], mtcars['mpg'], c='steelblue', marker='o')\nax.set_title(\"3D Scatter Plot\")\nax.set_xlabel(\"Weights\")\nax.set_ylabel(\"Displacement\")\nax.set_zlabel(\"Miles per gallon\")\nplt.show()\n```\n:::\n\n\n## R Perspective Plot: `persp()`\n\n:::: {.columns}\n\n::: {.column width=\"44%\"}\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\npar(mar = c(0,0,0,0))\n# Exaggerate the relief\nz <- 2 * volcano      \n# 10 meter spacing (S to N)\nx <- 10 * (1:nrow(z))   \n# 10 meter spacing (E to W)\ny <- 10 * (1:ncol(z))   \npar(bg = \"slategray\")\npersp(x, y, z, theta = 135, phi = 30, \n      col = \"green3\", scale = FALSE,\n      ltheta = -120, shade = 0.75, \n      border = NA, box = FALSE)\n```\n:::\n:::\n\n\n\n::: {.column width=\"56%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/06-syntax/unnamed-chunk-163-1.png){fig-align='center' width=100%}\n:::\n:::\n:::\n::::\n\nIn [Python](https://matplotlib.org/stable/plot_types/3D/surface3d_simple.html),\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-fold=\"true\" code-line-numbers=\"false\"}\nvolcano = pd.read_csv(\"./slides/data/volcano.csv\", index_col=0)\nvolcano = volcano.values\nz = 2 * volcano\nx = np.arange(1, z.shape[0] + 1) * 10\ny = np.arange(1, z.shape[1] + 1) * 10  \nX, Y = np.meshgrid(y, x)\nfig = plt.figure()\nax = fig.add_subplot(projection='3d', facecolor=\"slategray\")\nax.plot_surface(X, Y, z, cmap=\"Greens\", edgecolor=\"none\", shade=True, alpha=0.9)\nplt.show()\n```\n:::\n\n\n::: notes\n- You can also generate a so-called perspective plot using the function persp().\n- I don't use the function often. You can try it with different argument values, and see how it changes.\n:::\n\n\n##\n\n:::{.lab}\n\n\n<span style=\"color:blue\"> **07-Plotting** </span>\n<!-- - Create a R script named **lab04-basicplot.R** -->\n\n\nIn **lab.qmd** `## Lab 7`,\n\n- For the `mtcars` data, use R or Python to \n  + make a scatter plot of `miles per gallon` vs. `weight`. Decorate your plot using arguments, `col`, `pch`, `xlab`, etc.\n  \n  + create a histogram of 1/4 mile time. Make it beautiful!\n  \n- Commit and Push your work once you are done.\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nmtcars = pd.read_csv('./data/mtcars.csv')\n```\n:::\n\n:::\n\n\n<!-- - *Find your mate and work in pairs. * -->\n\n<!-- - *Two volunteer pairs teach us how to make beautiful plots next Tuesday (Feb 13)!* -->\n\n<!-- - *The presenters will be awarded a hex sticker! 😎* -->\n\n\n## Resources\n\n- [The R Graph Gallery](https://www.r-graph-gallery.com/)\n- [matplotlib](https://matplotlib.org/stable/plot_types/index.html)\n\nWe will talk about data visualization in detail soon!\n\n\n::: notes\nhttps://stackoverflow.com/questions/43482191/matplotlib-axes-plot-vs-pyplot-plot\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}